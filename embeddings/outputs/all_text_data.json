[
    "Assuming that you have some experience programming earlier, in this section we will recap on basic programming concepts using C++ .",
    "Since we assume your first exposure to programming was in C, we may compare C++ to C.",
    "In Fig. 1.2 , we show an example of a C++ program that prints Hello world! .",
    "Fig. 1.2  A simple hello world program showing the structure of a C++ program #",
    "#include <iostream> is an include statement that includes the standard input-output stream library.",
    "iostream has implementations of streams , which are a sequence of characters transferred between the program and input-output devices.",
    "We will use cout and cin , where cout is for output and cin is for input.",
    "The equivalent of #include <iostream> is #include <stdio.h> in C.",
    "using namespace std; is a statement that declares using a container of names named std .",
    "Here, namespace means a container and std is the container we will use.",
    "std is short for standard.",
    "int main (){ is the main function which is the first function called when executing our program.",
    "cout is a standard output stream that we use to write output to the screen.",
    "<< is an operator.",
    "Just like + is an operator for addition, << is an operator to output.",
    "\"Hello world!\" is a string that we want to output.",
    "Note that we have it between double quotes.",
    "<< endl; is the output operator << again followed by endl , which is used to output a newline in C++.",
    "return 0; exits the main function just as in C.",
    "Recall that in C, the above program would look as follows:",
    "1.2.1.1.  A program to input a value #",
    "If we would like to write a program that takes a number from the user, we would use cin as follows.",
    "In line 5, we declare an integer variable named value as we would do in C.",
    "In line 8, cin is standard input stream used to get user input, and >> is the operator used to get the user input and store it in the variable to the right of >> , which is value .",
    "In line 10, we use cout to output the string \"The value entered is \" followed by value .",
    "To follow the string by the value stored in a variable, you have to put a << before the variable.",
    "Equivalent in C",
    "The above program in C looks as follows.",
    "In line 6, we used scanf function to take input from the user.",
    "In C, we have to use format specifiers, e.g. %d , to specify the type of the variable to print it or to take it as input.",
    "Note that this is not the case in C++.",
    "Many people are confused about when to use << and >> .",
    "Our tip is to consider the direction in which the operators point.",
    "If you are using cout , you use << which points out side the page towards cout .",
    "Otherwise, if you are using cin , then use >> which points in side the page towards the variable that we are reading into.",
    "This is illustrated in the figure below.",
    "Fig. 1.3  Direction of the operator can help you recall its use. #",
    "In C and C++, we define the data type of a variable when we declare it, e.g. in int i; , we declare a variable i of int type.",
    "The data types in C++ are similar to C.",
    "In the following subsections, we recap on common data types in C++.",
    "1.2.2.1.  Integers #",
    "Integers are whole numbers, for example, \\(0\\) , \\(-23\\) and \\(789\\) .",
    "We have different data types to store an integer.",
    "int stores an integer typically in 32 bits, i.e. 4 bytes.",
    "Recall that 8 bits make a byte.",
    "If one bit stores the sign, we have 31 bits to store the number.",
    "Hence, int can store \\(-2^{31}\\) to \\(0\\) to \\(2^{31} - 1\\) .",
    "short stores an integer typically in 16 bits.",
    "If one bit stores the sign, we have 15 bits to store the number.",
    "Hence, short can store \\(-2^{15}\\) to \\(0\\) to \\(2^{15} - 1\\) .",
    "long stores an integer typically in more than 32 bits with obviously a wider range of numbers.",
    "For the purpose of this course, we recommend using int to store integers.",
    "For example, int participants = 60;",
    "1.2.2.2.  Floating-point numbers #",
    "Floating-point/fractional/real numbers are numbers that have numbers after the decimal point, for example, \\(2.9\\) , \\(-118.763\\) .",
    "The floating-point representation in computer memory resemble scientific notation., e.g. \\(2.89 \\times 10^{14}\\) is represented as \\(2.89e14\\) or \\(2.89E14\\) .",
    "Different data types in C/C++ can store floating-point numbers.",
    "float stores a number using 32 bits, with 7 decimal digits of precision — the total number of significant digits both before and after the decimal point.",
    "double stores a number using 64 bits, with 15 decimal digits of precision.",
    "long double typically stores a number using more than 64 bits, with greater precision than double .",
    "For the purpose of this course, we recommend using double to store floating-point numbers.",
    "For example, double inchesInCm = 2.54;",
    "1.2.2.3.  Boolean #",
    "Similar to C, in C++, we have the bool data type to represent a logical value, i.e. true or false in 8 bits.",
    "Different from C, in C++, we don’t need to include a library to use this data type.",
    "For example, bool isRaining = false;",
    "1.2.2.4.  Characters #",
    "We can store a single character in char data type using 8 bits.",
    "For example, char letter = 'a' , char sign = '-' where the character is enclosed between a single quote.",
    "1.2.2.5.  Arrays #",
    "An array stores multiple data elements of the same data type using a single identifier.",
    "Data can be of any type.",
    "For example, in",
    "arr is an array identifier that represents 7 different elements of the data type int .",
    "arr[0] would access the first element storing 1 .",
    "The last element can be accessed using arr[6] .",
    "1.2.2.6.  Strings #",
    "An array can be used to store more than a single character.",
    "This can be a string in C if it was a null-terminated array of characters.",
    "For example, in",
    "we declare a string named h that stores the string \"Hello\" , where h[5] stores a null character '\\0' .",
    "In C, including the string library using #include <string.h> can give access to string functions like strcmp , strlen and strcpy .",
    "However, in C++, we have a data type named string to store a sequence of characters.",
    "To use this data type, you need to include the string library using #include <string> .",
    "You can perform some operations on strings such as concatenating them using + or comparing them using == .",
    "For example, in the following code, we take from the user the course department and code and check if it is \"ECE244\" .",
    "Like most programming languages, in C++, we have:",
    "Arithmetic operators such as + , - , * , / and % with brackets () to help us define the precedence of operations.",
    "For example, 5 % 3 is the remainder of 5 divided 3 is 2.",
    "Assignment operators which assigns an evaluation/value to a variable.",
    "For example, in int x = 7 + 3; the = assigns the value of 7 + 3 to x .",
    "In addition to = , we have += , -= , *= , /= and %= .",
    "These assign to the variable on the left the variable itself plus/minus/multiplied/divided/modulo the value on the right.",
    "For example, x += 3 is equivalent to x = x + 3 .",
    "Increment and decrement operators such as ++ and -- .",
    "For example, i++; would increment i by 1.",
    "Relational operators such as == (equal), != (not equal), < (less than), > (greater than), <= (less than or equal), >= (greater than or equal) that compare two values and get evaluated to true or false .",
    "For example, 7 < 5 would be evaluated as false .",
    "Logical operators such as && (and), || (or) and ! (not).",
    "For example, if we want to evaluate a number is between 5 and 15 (inclusive), then the number has to be greater than or equal 5 and less than or equal 15.",
    "This would translate to this expression number >= 5 && number <= 15 .",
    "sizeof() operator would find the number of bytes it takes to store a data type.",
    "For example, sizeof(int) would evaluate to 4, as it takes 4 bytes to store an int .",
    "Control structures are used to control the flow of execution of a program, e.g. , if-statements and while, for and do-while loops.",
    "1.2.4.1.  If-statements #",
    "In C and C++, if-statements allow you to take a decision in a program to do something if a condition is true .",
    "If we want to take another decision if the condition is false , an else to the if would do it.",
    "For example, in the following code, we try finding out if the shape is a rectangle or square based on the height and width entered by the user.",
    "1.2.4.2.  Loops #",
    "On the other hand, loops help you execute a block of code repeatedly as long as a condition is true .",
    "There are three main loop structures:",
    "In a while loop , if the condition is true , the body of the loop will be executed.",
    "Otherwise, statements after the loop are executed.",
    "The body of the loop will be executed repeatedly until the condition returns false .",
    "For example, the following code prints numbers from 1 to 10.",
    "A do-while loop executes the body of the loop first then checks the condition.",
    "If the condition is true , the body of the loop would be executed again.",
    "Otherwise, the statements after the loop will be executed.",
    "For example, the following code would ask the user to enter a number between 1 and 10, and if the entered number is within the range in line 10, it would exit the loop.",
    "Otherwise, it will continue to prompt the user in lines 8 – 9.",
    "The body of the loop will be executed at least once.",
    "A for loop also does repeat a block of code depending on a condition, but it has a different structure with three expressions: initialization , where you initialize a state of a variable for example, condition , which determines if the program will execute the body of the loop, and increment , where you change the state of the variable to get closer to change the condition.",
    "For example, in line 6 in the code below, int i = 1 initializes i to 1, i <= 10 checks if i is less than or equal to 10, and in i++ we increment i by 1.",
    "The body of the for loop is executed as long as i is less than or equal to 10.",
    "As you already know a program is a sequence of instructions to be executed by a computer.",
    "Several components in the computer help execute a program.",
    "Fig. 1.1  The basic structure of a computer  1 . #",
    "The main memory stores the data and instructions that are currently being executed.",
    "The central processing unit (CPU) executes instructions of a program.",
    "The CPU fetches instructions from the main memory, decodes them and execute them.",
    "Some instructions may require writing and reading data to and from the main memory.",
    "The CPU has two main components: arithmetic logic unit (ALU) and control unit (CU).",
    "The ALU is responsible for executing arithmetic operations such as addition and subtraction and logical operations such as comparisons \\(<\\) , \\(>\\) , etc., while the control unit is responsible for controlling the execution of instructions.",
    "Some instructions executed require accessing input and output (I/O) devices.",
    "These devices are used to communicate with the outside world, for example, to take input from a user from a keyboard, or to provide output to a user on a monitor.",
    "Next, let’s get started on how to write a program in C++.",
    "Image taken from Snefru: Learning Programming with C .",
    "This is a small sample book to give you a feel for how book content is structured.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 2 in Fall 2022 Midterm Exam [Easy]",
    "When you compile the following program, what happens?",
    "If there is an error, explain what the error is (one sentence max).",
    "There will be a compilation error because hello() is called before it’s declared.",
    "Question 4 in Fall 2022 Midterm Exam [Easy]",
    "The output is",
    "Question 6 in Fall 2022 Midterm Exam [Easy] :",
    "Compared to C, passing by reference is introduced in C++.",
    "Both of the following two functions can be used to swap the value of two integers:",
    "Write the implementations for these two functions (no more than 4 lines of code for each function)",
    "If given two int variables x and y , write a function call that swaps the value of x and y , using swap_by_p .",
    "If given two int variables x and y , write a function call that swaps the value of x and y , using swap_by_r .",
    "Question 7 in Fall 2022 Midterm Exam [Easy]",
    "Ellie writes a program to make a simple database for ECE students who like drinking soy milk from 2T2 to 2T6.",
    "She designs two classes: student and ECE , and puts them into different files below.",
    "The main function is in the main.cpp .",
    "Ellie tries to compile this program with g++.",
    "What’s the Unix (i.e., terminal) command that compiles the entire program using one command, which generates an executable called small_database ?",
    "However, it fails to compile.",
    "Can you point out the compile-time error and fix this error for her?",
    "No header guard in student.h",
    "With your help, Ellie has fixed the compile-time error.",
    "Now, Ellie wants to use separate compilation learned from ECE244 to compile her project.",
    "Write down all the Unix commands necessary to separately compile the above files and generate an executable small_database .",
    "Ellie then changes some code in ECE.cpp .",
    "Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files needed.",
    "Assume the generated executable is called small_database .",
    "Question 2 Fall 2018 Midterm Exam",
    "You are given a program that has a main function and 3 classes: First, Second and Third.",
    "For each of these classes, you have a definition file and an implementation file.",
    "Thus, you have seven files in total: First.h, First.cpp, Second.h, Second.cpp, Third.h, Third.cpp and main.cpp.",
    "All the files exist in the same directory.",
    "The first few lines of each file are shown below.",
    "The rest of the contents of each file is irrelevant to the question and is shown as ...",
    "You may assume the definition/implementation files are error-free.",
    "The files are to be separately compiled and then linked into a single executable called main .",
    "Write down the Unix commands necessary to separately compile the above files and generate the executable.",
    "You modify the file Second.cpp .",
    "Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files possible.",
    "You modify the file First.h .",
    "Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files possible.",
    "In this chapter, we review basic concepts of programming in C++.",
    "Topics discussed are basic data types, if-else statements, loops, multiple file programs, separate compilation, header guards.",
    "We also discuss functions, pass-by-value, pass-by-pointer and pass-by-reference.",
    "So far, you have been writing code in a single file.",
    "However, as the code grows, it becomes challenging to read, harder to reuse, and more difficult to update and debug.",
    "In the previous section, we discussed how to use functions to divide programs into smaller parts.",
    "Each function had a specific responsibility, and the main function called these functions to solve the problem.",
    "By the same token, we want to split code across multiple files.",
    "This is with the goal of making the code easier to debug, reusable, and easier to collaborate on with many team members.",
    "We will also learn how splitting code into multiple files can make the compilation process faster .",
    "1.4.1.1.  Compilation of a single file #",
    "For example, the following code is written in one file named main.cpp .",
    "Code in main.cpp",
    "If we want to run the program, we need to compile the code.",
    "Compilation is the process of translating the human-readable code into binary instructions that the computer can execute directly or machine code .",
    "The compiler reads the code and translates it into machine code stored in a file called the executable file.",
    "The executable file is then executed by the computer.",
    "To compile the code above, we will use the C++ compiler named g++ .",
    "We will navigate to the directory containing main.cpp and run the following command in the terminal:",
    "g++ is the compiler that will read the source code file main.cpp .",
    "We use the flag -o to specify the name of the executable file main that will be created after the compilation process.",
    "The executable file is the file that contains the machine code that the computer can execute.",
    "We can run the executable file by running the following command:",
    "The program will ask you to enter a number, and then it will print the number you entered.",
    "1.4.1.2.  Split code into multiple files #",
    "Generally, we separate the interface, which is the function declarations, from the implementation, which is the function definitions.",
    "The interface is stored in a header file with the extension .h , and the implementation is stored in a source file with the extension .cpp .",
    "We can indeed have all function declarations in a header file .h and all function definitions in a source file .cpp .",
    "However, to separate the code into logical splits, we will have each header file responsible for a particular set of functions and each source file responsible for the implementation of the functions in the header file.",
    "For example, we will split the code above into two header files: print.h and input.h , and three source files: print.cpp , input.cpp and main.cpp .",
    "These files contain:",
    "print.h : the function declaration of printNum function.",
    "input.h : the function declaration of userInputNum function.",
    "print.cpp : the function definition for the printNum function.",
    "input.cpp : the function definition for the userInputNum function.",
    "main.cpp : the main function.",
    "Code split in the files will look like the following:",
    "Fig. 1.13  The header files contain function declarations, and the source files contain function definitions. Hidden segments in the source files are the function declarations of functions used in the source file. #",
    "As shown in Fig. 1.13 , the source files contain “hidden segments”.",
    "These hidden segments should be function declarations of functions used in the source file.",
    "Each source file should be “self-sufficient”, meaning each source file should contain all the function declarations needed to compile the code.",
    "For example, the main.cpp file uses the printNum and userInputNum functions, which are not declared before usage in the main function.",
    "The main.cpp file should contain the function definitions for these functions.",
    "In main.cpp , we will have the function definition of printNum as #include \"print.h\" and userInputNum as #include \"input.h\" in the main.cpp file.",
    "In print.cpp , we will have the function definition of printNum function as #include \"print.h\" .",
    "Since we use the cout object in the printNum function, we need to include the iostream library and add using namespace std; in the print.cpp file.",
    "In input.cpp , we will have the function definition of userInputNum function as #include \"input.h\" .",
    "Since we use the cout and cin object in the userInputNum function, we need to include the iostream library and add using namespace std; in the input.cpp file.",
    "After including all function declarations in all source files, the code in the files will look like the following:",
    "Fig. 1.14  Source files include the function declarations from header files to be ready for compilation. #",
    "To compile a program with multiple files, we can go to the directory having all the files and run the following command:",
    "This command will compile each source file separately, and generate one executable file named main .",
    "What are the steps that generate one executable?",
    "To generate the executable file, the g++ compiler goes through the following steps:",
    "1- Preprocessing: The preprocessing step textually replaces #include \"file_name\" in each source file with contents of the file_name .",
    "After that step, we don’t need the header files anymore.",
    "2- Generating object files: The compiler converts each preprocessed human-readable code to machine code and stores it in an object file.",
    "For example, main.cpp will be converted to main.o file.",
    "The object file contains the machine code for the functions defined in the source file, and references to other files.",
    "For example, the main.o file will contain the machine code for the main function and references to the printNum and userInputNum functions.",
    "Hence, the object file cannot be executed by the computer alone.",
    "3- Linking object files: The linker will link all object files together to generate one executable file.",
    "The executable file contains the machine code for all functions defined in all source files.",
    "The linking step is much faster than the compilation step.",
    "The preprocessing and compilation steps are done for each source file separately through the following commands: 1- Main.cpp: g++ -c main.cpp produces main.o .",
    "2- Print.cpp: g++ -c print.cpp produces print.o .",
    "3- Input.cpp: g++ -c input.cpp produces input.o .",
    "The linking step is done once for all object files using the command:",
    "In Fig. 1.15 , we show the process of generating an executable file from multiple source files.",
    "Fig. 1.15  The process of generating an executable file from multiple source files. #",
    "1.4.2.1.  Separate Compilation #",
    "The process of compiling each source file separately and linking them together is called separate compilation .",
    "Separate compilation allows us to compile only the source files that have been changed.",
    "This makes the compilation process faster.",
    "In the above example, if we change the",
    "print.cpp file, this changes the machine code in the print.o file.",
    "To generate the new executable file, we only need to compile the print.cpp file and link it with the other object files.",
    "We don’t need to compile the main.cpp and input.cpp files.",
    "This requires running the following commands:",
    "g++ -c print.cpp",
    "g++ main.o print.o input.o -o main",
    "main.cpp , we only need to compile main.cpp and link the main.o file with the other object files using:",
    "g++ -c main.cpp",
    "g++ main.o print.o input.o -o main",
    "print.h file, any source file that includes it must be recompiled.",
    "This is because, during the preprocessing stage, #include \"print.h\" is replaced with the updated contents of the file.",
    "Recompiling ensures that source files using the updated declarations generate the correct object files.",
    "This requires running the following commands:",
    "g++ -c print.cpp",
    "g++ -c main.cpp",
    "g++ main.o print.o input.o -o main",
    "The order of compiling the source files does not matter as long as all source files are compiled before linking them together.",
    "Since linking is much faster than compilation, we will only compile files that need to be recompiled and.",
    "Separate compilation is a powerful feature that allows us to compile only the source files that have been changed.",
    "This makes the compilation process faster and more efficient.",
    "IDEs, like VS Code, and build tools, like Make, automate the process of separate compilation by tracking files changed and compiling only the necessary source files.",
    "Header files used to store function declarations are included in the source files using the #include \"file_name\" directive.",
    "The header files are not compiled separately, but their contents are copied to the source files during the preprocessing stage.",
    "Let’s copy function declarations.",
    "If we were to get rid of header files and include the function declarations in the source files, we would have to copy the function declarations to all source files that use the functions.",
    "This would lead to code duplication and make the code harder to maintain.",
    "Let’s include source files.",
    "If we were to include source files instead of the header files:",
    "whenever we change a source file, we have to compile it and any other file that includes it.",
    "For example, if we have #include \"print.cpp\" in the main.cpp file, we have to compile print.cpp and main.cpp whenever we change print.cpp .",
    "This defeats the purpose of separate compilation that saves time by compiling only the source files that have been changed.",
    "the linker will fail at generating an executable as it will detect that there are duplicate function implementations in multiple object files.",
    "For example, if we have #include \"print.cpp\" in the main.cpp file, the printNum function will be defined in both print.o and main.o files.",
    "The linker will detect this and fail to generate an executable file.",
    "Why would someone mistakenly include a header file multiple times?",
    "The answer is that a header file may include another header file, and then you include both these header files in a source file.",
    "For example, the following figure shows a.h and b.h header files.",
    "The b.h header file includes the a.h header file to be able to use struct A in b.h. If you include both a.h and b.h in a source file, at the preprocessing stage, the a.h file contents, which is struct A definition will be included twice in the source file.",
    "This flags an error at compilation as the struct A definition is duplicated.",
    "Fig. 1.16  Since a.h is included in b.h and we included a.h and b.h in main.cp, indirectly, the header file a.h is included twice in main.cpp. #",
    "Solution! To avoid this error, we need to tell the preprocessor to include each header file only once using header guards .",
    "Header guards are preprocessor directives that prevent the contents of a header file from being included more than once in a source file.",
    "The header guards are defined at the beginning of the header file and are used to check if the header file has been included before.",
    "If the header file has been included before, the contents of the header file are not included again.",
    "The header guards are defined as follows:",
    "#ifndef FILE_NAME_H checks if the FILE_NAME_H macro has been defined before.",
    "If it has not been defined, the contents of the header file are included.",
    "The #define FILE_NAME_H directive defines the FILE_NAME_H macro to prevent the contents of the header file from being included again.",
    "The #endif directive ends the header guard.",
    "For example, after adding header guards to a.h header file, it will look like the following figure.",
    "As shown, the preprocessor will include the contents of the a.h file once and define the macro A_H ; however, the next time to include a.h , the preprocessor will realize that the macro A_H has been defined before and ignore the contents till #endif .",
    "In short, this will prevent the duplication of the struct A definition.",
    "Fig. 1.17  Header guards prevent the contents of the header file from being included more than once in a source file. #",
    "The convention in naming the macro is to follow the file name.",
    "For example, the macro in the header guards for b.h file will be B_H .",
    "This is to ensure the macros are unique and prevent conflicts with other header files.",
    "A function is a sequence of instructions that can be called by its name multiple times in a program.",
    "All code must have at least one function, i.e. the main function.",
    "This main function is the entry point of the program, or the first function that is called when the program is executed.",
    "Functions allow you (the programmer) to divide your code into pieces and reuse code instead of repeating it.",
    "Most importantly, functions allow you to write code that is easier to debug and maintain.",
    "Consider the problem of calculating the number of ways to choose 2 cards from a set of 5 cards, or k elements from a set of n elements.",
    "This is a common problem in combinatorics and is often written as n choose k .",
    "The formula for n choose k is",
    "\\(\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\\) ,",
    "where n! is the factorial of n .",
    "The factorial of n can be calculated as n = n * (n - 1) * ...",
    "* 3 * 2 * 1 .",
    "For example, 5! = 5 * 4 * 3 * 2 * 1 = 120 .",
    "We want to write a program that takes in the values of n and k and calculates the number of ways to choose k elements from n elements.",
    "Since there are multiple steps in the calculation, we can divide the program into two main functions: one function to calculate the factorial of a number and another function to calculate n choose k .",
    "1.3.1.1.  Defining a function #",
    "To define a function, you must specify the input parameters, the return type, and the function body.",
    "The general syntax of a function is as follows:",
    "For example, the following function finds the factorial of a number:",
    "Fig. 1.4  The anatomy of a function that calculates the factorial of a number. #",
    "To use the function in a program, you must call the function.",
    "The general syntax of a function call requires the function name and the input values .",
    "For example, to call the factorial function, you would write factorial(n) to calculate the factorial of a number stored in n as shown below in line 15.",
    "1.3.1.2.  Multiple parameters #",
    "To calculate n choose k , we need to define another function that takes in two parameters: n and k .",
    "The function should call the factorial function to calculate \\(\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\\) .",
    "The function will return the number of ways to choose k elements from n elements.",
    "The function signature is as follows:",
    "It is important to note that when calling the nChooseK function, you must pass in the values of n and k in their respective order as arguments.",
    "1.3.1.3.  Function prototypes #",
    "When the compiler compiles a program, it reads the code from top to bottom.",
    "If it observes a function call before the function definition, it will raise an error.",
    "In the previous example, the factorial function was defined first, followed by the nChooseK function, and then the main function, because factorial function was called in nChooseK , and nChooseK was called in main .",
    "Functions cannot be called before they are defined.",
    "Determining the order of function definitions can be sometimes challenging.",
    "For example, if function a calls function b , and in turn function b calls function a , the order of function definitions before the main function cannot be determined.",
    "To solve this issue, you can define the function prototypes before the main function to inform the compiler about the function signature.",
    "This way you can call functions in the main before implementing them.",
    "Then, later after the main function, you implement all the functions defined before the main function.",
    "It is a good practice to always define function prototypes before the main function.",
    "A function prototype is a declaration of the function that includes the function name, return type, and input parameter list.",
    "The general syntax of a function prototype is as follows:",
    "To rewrite the code in the previous example using function prototypes, you would define the factorial and nChooseK function prototypes before the main function and implement them after the main function as shown below:",
    "In this case, the order of function prototypes and function definitions does not matter.",
    "The compiler will know the function signature and will not raise any errors.",
    "When passing the input parameter n to the factorial function, the function creates a local version of n that is separate from the n in the calling function.",
    "This is known as pass-by-value.",
    "In pass-by-value, the value of n in the main function is passed to the value of the local variable n in the factorial function.",
    "Any changes made to the n inside the factorial function do not affect the original parameter in the calling function.",
    "This is because changes are made to the local version of n in the factorial function.",
    "In the following image, we visualize what happens in the main memory when n is passed to the factorial function.",
    "When the factorial function is called:",
    "a memory frame that stores the local variables of factorial , such as n and result , is created",
    "the changes in the local n and result of factorial will not affect any variables elsewhere",
    "When the factorial function returns, the memory frame that stores the local variables of factorial is removed from the main memory.",
    "Fig. 1.5  There is a local version of  n  in the factorial function in the main memory. #",
    "The main issue with pass-by-value is that its not always applicable to all cases.",
    "For example, if we were to write a function that takes in as input two variables and swaps their values, we would not be able to do so using pass-by-value.",
    "For example, the following code snippet attempts to swap the values of two variables a and b using pass-by-value but fails to do so as the value of a and b in the main function remains unchanged.",
    "Fig. 1.6  a  and  b  are passed by value to the  swapByValue  function. #",
    "Fig. 1.7  Swap the local variables  a  and  b  in the  swapByValue  function. #",
    "Fig. 1.8  After returning to the  main  function, the values of  a  and  b  remain unchanged as changes happened in the local variables in the  swapByValue  frame. #",
    "In short, we cannot use pass-by-value when we expect the changes made to the input parameters to be reflected in the main function.",
    "Instead, we can use either pass-by-reference or pass-by-pointer.",
    "1.3.3.1.  Pass-By-Pointer #",
    "We want to ensure variables in the calling function are changed in the caller function.",
    "Instead of passing the values of the variables, we need to pass the addresses of the variables.",
    "This way, the function can access the memory locations of the variables and change their values directly.",
    "This is known as pass-by-pointer .",
    "Back to the swapping problem, instead of passing the values of a and b to the swapByValue function, we need to pass the address of a and b to the function.",
    "The function will then swap the values of a and b using the addresses of a and b .",
    "Pointers Recap",
    "To pass the address of a variable to a function, you must use a pointer.",
    "A pointer is a variable that stores the memory address of another variable.",
    "A pointer is declared by adding an asterisk * after the data type.",
    "For example, to declare a pointer to an integer, you would write int *ptr; .",
    "The pointer ptr can store the memory address of an integer variable.",
    "Get an address of a variable.",
    "To get an address of a variable, you use the reference operator & before the variable name.",
    "For example, in the following code the variable ptr is storing the address of the variable a .",
    "We get the address of a by writing &a .",
    "Get the value of a variable at an address.",
    "To access the value stored at the memory address stored in a pointer, you use the dereference operator * before the pointer name.",
    "For example, to access the value stored at the memory address stored in ptr , you would write *ptr .",
    "In Fig. 1.9 , we declare a pointer ptr and set it’s value to the memory address of the variable a : ptr = &a .",
    "Then, we dereference ptr to access the value of a and change it to 10.",
    "In *ptr = 10; , *ptr is equivalent to *(&a) .",
    "As we dereference the address of a , we can change the value of a to 10.",
    "Then, in b = *ptr we change the value of b to a .",
    "We access a through *ptr and assign it to b by writing b = *ptr .",
    "This is equivalent to b = a .",
    "Fig. 1.9  The pointer  ptr  stores the memory address of the variable  a  by setting  ptr   =   &a . The value stored at the memory address stored in  ptr  is accessed by  *ptr . We can change the value in  a  by dereferencing  ptr  using  *ptr   =   10 . Also, we can change the value in  b  by assigning  a  to it through dereferencing  ptr :  *ptr . #",
    "The following code fixes the swap function to ensure the values of a and b are swapped using pass-by-pointer.",
    "[Line 4] To pass the addresses of integers a and b to the swap function, we need to change the function prototype to accept pointers to integers.",
    "The function signature should be void swapByPointers(int* pa, int* pb); .",
    "The * operator is used after the data type to declare a pointer to an integer.",
    "[Line 9] When the function is called, we pass the address of a and b by calling the function swapByPointers(&a, &b); .",
    "The & operator is used before a and b to get their addresses.",
    "[Line 14] The function then receives the address of a into pa and the address of b into pb .",
    "[Line 15 to 17] In the function, we dereference the pointer pa to get access to a and pb to get access to b in the main function.",
    "We then swap the values of a and b by assigning *pb to *pa and *pa to *pb .",
    "Fig. 1.10  a  and  b  are passed by pointer to the  swapByPointers  function. #",
    "Fig. 1.11  The addresses of  a  and  b  are used to change their values in the main function.  a  is accessed by dereferencing  pa  and  b  is accessed by dereferencing  pb . #",
    "Fig. 1.12  When the  a  and  b  are swapped in the  swapByPointers  function, the changes are reflected in the  main  function. #",
    "1.3.3.2.  Pass-By-Reference #",
    "Pass-by-pointer can be error prone and complex as the programmer has to take care of the syntax of * and & operators.",
    "To simplify the process, C++ provides a feature called pass-by-reference .",
    "What is a reference?",
    "In C++, a reference is an alias, an alternate identifier/name, for another variable.",
    "For example, in the following code, a is an integer.",
    "We create a reference to a by writing int& ra = a; , where the type of ra is int& .",
    "Any changes made to ra will affect a and vice versa.",
    "In the following code example, ra is a reference to the variable a .",
    "We use ra to change the value of a to 10.",
    "The value of a is then printed to the console.",
    "Then, we use ra to change the value of a to b .",
    "Note that ra = b does not reassign ra to refer to b .",
    "Once ra was declared to refer to a , it will never refer to any other variable.",
    "A few important notes on references:",
    "A reference must be initialized when it is declared.",
    "For example, we cannot do int& ra; as we must declare and initialize ra at the same time.",
    "A reference cannot be reassigned to another variable.",
    "Once a reference is assigned to a variable, it cannot be reassigned to another variable.",
    "For example, int& ra = a; means ra is a reference to a .",
    "We cannot change ra to be a reference to another variable b .",
    "A reference is not a separate variable.",
    "It does not have a separate memory location.",
    "It is only an alias to another variable.",
    "Don’t confuse references with pointers.",
    "References are not pointers.",
    "They are aliases to variables.",
    "The operators * and & are not used with references.",
    "The type of a reference is the same as the type of the variable it refers to.",
    "We only add & after the type to declare a reference.",
    "How can we use references to avoid the syntax-heavy pass-by-pointers?",
    "To functions, we can pass references to variables and change the values of variables.",
    "For example, in the swap function, instead of passing the addresses of a and b , we can pass references to a and b .",
    "[Line 4] We change the function prototype to accept references to integers.",
    "The function signature should be void swapByValue(int& ra, int& rb); .",
    "The & operator is used after the data type to declare a reference to an integer.",
    "[Line 9] When the function is called, we pass a and b to set the reference ra to a and rb to b .",
    "[Line 14 to 17] The function then sets the reference ra to a and rb to b .",
    "In the function, ra and rb are used to access the values of a and b in the main function.",
    "We then swap the values of a and b by assigning ra to rb and rb to ra .",
    "References and pointers maybe confused with each other as they both allow you to access the memory address of a variable.",
    "However, there are some key differences between references and pointers:",
    "Reference is safer than a pointer.",
    "A reference cannot be NULL and must be initialized when declared.",
    "A pointer can be NULL and can point to any memory location.",
    "Dereferencing a NULL pointer can cause a segmentation fault.",
    "References do not have separate memory locations.",
    "They are aliases to variables.",
    "Pointers have separate memory locations and store the memory address of another variable.",
    "A reference cannot be reassigned to another variable.",
    "Once a reference is assigned to a variable, it cannot be reassigned to another variable.",
    "A pointer can be reassigned to another memory location.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 10 in Fall 2022 Final Exam [Challenging]",
    "Thanks to your previous implementation of the VTuber, it became an instant modern classic.",
    "With great popularity comes greater responsibility.",
    "Now there are more than 300,000 VTubers streaming on the MeTube, and your engineering manager asks you to implement a data structure that allows users to quickly lookup whether a specific Vtuber is currently live-streaming.",
    "A native solution would be using an array of 300,000 entries, with each entry holding a boolean variable indicating whether the corresponding Vtuber is live-streaming or not.",
    "However, there are two major problems:",
    "Users can only query the database with Vtubers’ names, not some internal ids.",
    "Only ~20% of total Vtubers are streaming at any given time, so most array enteries are inactive.",
    "However, you’d like to maintain a lookup time that is approximately \\(O(n)\\) .",
    "Now, you suddenly recall that in ECE 244 you learned the hash table, which resolves collisions with chaining.",
    "The hash table would suit your needs perfectly.",
    "Even better, you can use an existing linked list implementation written by your new colleague.",
    "The following is the class declaration of the linked list.",
    "Assume that it works correctly and encapsulates all the operations your hash table may need.",
    "Read it carefully, as you will need it to build your VTubers hash table later.",
    "Remember, it will not allocate any list node automatically, and only the destructor will deallocate list node memory.",
    "Also, you are given a string hash function, which uses a secret algorithm to turn the given string into a non-negative integer value.",
    "You can safely assume that given the same string inputs, the output value is always the same.",
    "However, two different strings may be turned into the same number.",
    "And finally, here is how the hash table is declared.",
    "It stores all the names of active VTubers at a given time, using the name as a unique key .",
    "The hash table solves collisions by chaining using the linked list.",
    "Essentially, the hash table should be similar to what has been discussed during the lecture.",
    "The following diagram should help you visualize what this hash table looks like:",
    "Fig. 13.1  Hash Table #",
    "When a VTuber goes online for streaming, insert() should be called to bring the name into the hash table.",
    "When the VTuber goes offline, remove() method should be called to remove the name from the hash table.",
    "The constructor and exist() methods are already implemented as shown below.",
    "They should help you clarify how the hash table works.",
    "Implement the insert() method of the hash table.",
    "The insert should fulfill the following requirements:",
    "You should maintain the unique name property.",
    "If the name already exists in the hash table, you should return false.",
    "Otherwise, allocate a list node for the string and insert it into the correct list, and return true.",
    "To address the collision, your hashtable should dynamically grow at run time.",
    "Specifically, when you try to insert a new name but the value of num_elements will become equal to or larger than table_slot_size/2 , you should double table_slot_size and allocate a new table with the updated size.",
    "Then, you should move all the existing names from the old table to the newly allocated table, and deallocate the old table.",
    "Notice that the hash index is directly related to the table_slot_size , so the hash index of the same name can be changed when moving from one table to another.",
    "You can add additional member functions if you need to.",
    "Your code should not trigger any segmentation fault, and it should not leak memory.",
    "You can define helper functions if you find them useful.",
    "You can make helpers as member functions if you think that would be necessary.",
    "Implement the remove method.",
    "Return true if the given name exists and is successfully removed, otherwise, return false.",
    "Your code should not trigger any segmentation fault, and it should not leak memory.",
    "Implement the change_name method.",
    "It removes the old_name and inserts the new_name .",
    "Return true if successful.",
    "Otherwise, it returns false either when the old_name doesn’t exist, or the new_name is the same as any existing name.",
    "Your code should not trigger any segmentation fault, and it should not leak memory.",
    "Hint: you can use the function you implemented in the previous questions.",
    "Implement the destructor of HashTable .",
    "It should deallocate the table array and all the lists.",
    "Your code should not trigger any segmentation fault, and it should not leak memory.",
    "In this chapter, we discuss a new data structure, called hashtable, that has an average run-time performance of \\(O(1)\\) for search/insert/delete operations.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 5 in Fall 2019 Midterm Exam [Easy]",
    "Consider a (non-member) function called doIt , which takes a single object of type DayOfYear and returns a single object also of type DayOfYear .",
    "You may assume that the class DayOfYear is correctly implemented and that DayOfYear.h is included.",
    "Which of the following implementations of this function is problem-free?",
    "Has no problem.",
    "We return arg by value and we create a copy of arg using copy constructor.",
    "Has no problem.",
    "We return temp by value and we create a copy of temp using copy constructor.",
    "Has a problem, because in the question it says doIt is a non-member function.",
    "Since this is a pointer to an object on which the member function is invoked, it can only be accessed in a member function.",
    "In short, we cannot access this in doIt function.",
    "Has a problem, but it is quite tricky.",
    "temp is a local only to the function doIt since it was defined only inside the function.",
    "temp will go out of scope or disappear from the memory the moment we return from doIt function.",
    "If we return temp by reference, and temp actually is non-existing after the function call, the behavior is undefined if we try accessing whatever doIt returns.",
    "Question 5 in Fall 2019 Final Exam [Intermediate]",
    "Consider the following class definition and implementation.",
    "The following main program uses class Duo .",
    "Write the output produced by each of the labeled statement (Statement 1 to Statement 6) in main.",
    "Write your answer in the table below.",
    "Grade Output",
    "Statement 1 ",
    "Statement 2 ",
    "Statement 3 ",
    "Statement 4 ",
    "Statement 5 ",
    "Statement 6 ",
    "Grade Output",
    "Statement 1 24 45",
    "Statement 2 1 2",
    "Statement 3 3 5",
    "Statement 4 7 8",
    "Statement 5 6 12 12 36",
    "Statement 6 6 12",
    "How many integers exist in memory in the form of a memory leak when execution reaches Point A in the main function above?",
    "Write your answer in the box below.",
    "Z initially had p and q pointing to two integers, and we lost access to them when we pointed to p and q from the object returned by value in Z = X.funnyMultiply(Y); .",
    "Another two integers were lost in W.print().funnyMultiply(V).print(); after returning from funnyMultiply function.",
    "Total, we have 4 integers in the memory exist in the form of a memory leak.",
    "In progress!",
    "In this chapter, we realize that in classes that have pointers, there is a high chance that we need to define the class’ own copy constructor, operator= and destructor.",
    "You can also download the .c file of the program by clicking on file name in text.",
    "For example, download hello-world.cpp if you want to edit the code yourself.",
    "If it opens a new window with contents of the file, right-click on the page and select Save As. You can choose where you want to save the file.",
    "Please make sure it is saved as .cpp file not .txt file.",
    "Example or potential output to the code will be shown as in the following example.",
    "Every chapter will have an exercises section.",
    "This section will include past exams questions related to the concepts discussed in the chapter (or previous chapters).",
    "Some may be marked as [Easy] , [Intermediate] or [Challenging] .",
    "The difficulty level is subjective and may vary from person to person.",
    "I expect you to solve these exercises after we cover the chapter in the lectures.",
    "These exercises will have solutions that will be hidden and you need to click to show the answer.",
    "For example,",
    "An answer will appear here.",
    "In some chapters, there will be a section on debugging.",
    "It will discuss the most common mistakes programmers make related to the chapter.",
    "It may or may not include a YouTube video where I debug a code using concepts discussed in the chapter.",
    "You can download a copy of each section by clicking on the top right most icon with an arrow.",
    "PDF should be your to-go option.",
    "You have a search box in the middle left of the page.",
    "You can search for a keyword or a phrase.",
    "It will search through the entire textbook.",
    "This website/online e-book is still under development.",
    "If you have any suggestions or feedback, please email me at salma @ ece .",
    "utoronto .",
    "ca .",
    "You can also hover over the cat icon in the top right of this page, and click on open issue.",
    "This will take you to GitHub where you can easily describe what’s the issue.",
    "This requires that you sign-up for a GitHub account.",
    "In the early days of computing, programming was indeed simpler than it is today, but it was far from straightforward, especially given the limitations of the hardware and software tools available at the time.",
    "As the computational speed and power improved, developers were able to create increasingly sophisticated programs.",
    "This growing complexity, coupled with the expanding range of problems that computers were being used to solve, led to the development of new programming languages and best practices.",
    "These developments were driven by a desire to create code that is not only less prone to errors or bugs but also more readable, modular , and easily extensible, facilitating collaboration among multiple developers and allowing for future enhancements.",
    "Recall that a modular program is one that is broken down into separate functional parts, for example, functions in a C program.",
    "Other important goals included improving code performance, making it easier to reason about, and increasing its reusability.",
    "This evolution of needs and goals led to the emergence of various programming paradigms.",
    "A programming paradigm is a way of thinking about and organizing code.",
    "It’s a style or philosophy of programming.",
    "Different paradigms are suitable for different types of problems, and most programming languages support one or more paradigms.",
    "For example, while learning C programming language in Snefru or APS 105: Computer Fundamentals, you were using functional programming paradigm .",
    "In this book, you will be learning object-oriented programming paradigm using C++ programming language.",
    "Object-oriented programming provides a different way of framing and solving problems.",
    "It allows you to better organize larger projects by breaking them into smaller chunks that can be solved by creating objects .",
    "Developers define what are these objects: their properties and what can we do to them.",
    "Object-oriented programming:",
    "Improves modularity of code, which allows you to build more complex code.",
    "Improves reusability of your code as code of objects can be easily used in other parts of the program or in other programs",
    "Can make it easier to extend programs",
    "Makes programs easier to maintain and troubleshoot/debug",
    "Makes it easier for teams to collaborate or large projects",
    "Let’s try differentiating functional and object-oriented programming paradigms.",
    "In any program, you will have some data, for example variables storing height of a building or color of a car, and behavior or operation, for example, functions that increase the speed of a car or calculate the surface area of a building exposed to wind.",
    "Let’s solve the problem of finding the area of a rectangle using functional and object-oriented programming.",
    "In functional programming, our data would be the length, height of the rectangle and a behavior or operation can be calculating the area of a rectangle.",
    "In C, we can store length and width in variables, and write a function to calculate the area.",
    "We can write a C program as follows:",
    "However, in object-oriented programming, the data and behavior would be in one entity, i.e. the length, width and calculateArea operation would be in a class called Rectangle .",
    "It would look like the following code, but you still did not learn the specifics of this code, so don’t panic.",
    "In short, functional programming focus on functions and keep the data (or variables) and behavior (or functions) separate.",
    "However, in object-oriented programming, the program is organized around objects that have both data and behavior.",
    "This is what we answer throughout this book.",
    "Let’s get started!",
    "This is a small sample book to give you a feel for how book content is structured.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 5 in Fall 2022 Midterm Exam [Easy]",
    "Consider the following program.",
    "Given the following contents of \"input.txt\" , write the output.",
    "Now you remove the infile.clear() from the code, so the program becomes:",
    "Question 2 in Fall 2021 Final Exam [Intermediate]",
    "Write a C++ function void readInts() that repeatedly reads integers from the standard input (using cin ) and then immediately outputs the input integer (using cout ), one integer per line.",
    "When a '.' character is encountered, the function prints the message Done on a line by itself and returns.",
    "If the user enters any characters other than integer digits or the '.' , the function prints the message Error on a line by itself and returns.",
    "You may assume the user will never enter eof .",
    "Thus, for example, if the user enters 51 16 700 .",
    ", the function prints:",
    "However, if the user enters 101 21 13 abc 444 , the function prints:",
    "Question 3 in Fall 2018 Midterm Exam [Intermediate]",
    "Consider the following program that uses stringstreams to read a command.",
    "The command has the following format:",
    "The command word is count and intArg is an integer argument.",
    "The command must have only one integer argument, e.g count 3 .",
    "The function handle_count performs the reading of the integer value.",
    "If the integer is valid, it returns true and updates the value of intArg .",
    "Otherwise, it returns false .",
    "Determine the number of arguments and the type of each argument and indicate them in the code above in the prototype of the function, handle_count .",
    "Further, indicate what parameters are passed to the function when it is invoked.",
    "Write your answers where indicated in the code above.",
    "You may not modify main by adding or removing line, other than by indicating the formal arguments in the function prototype and actual arguments of the function invocation.",
    "Write the header and body of the handle_count function below so it performs as indicated above.",
    "Question 6 in Fall 2019 Midterm Exam [Intermediate]",
    "For each of the following main functions, indicate the output produced in response to the user entering 1 2 3 4 five on the keyboard followed by the Enter key.",
    "Choose only one answer.",
    "Choose one the following choices:",
    "None; the program runs in an infinite loop",
    "14 The last loop when five is entered, num is unchanged and 4 will be added to sum again.",
    "However, in some compilers, sum may be printed to be 10, as the complier will set num to 0 when cin.fail() is raised.",
    "This means, 2.",
    "10 is considered correct too.",
    "Choose one the following choices:",
    "None; the program runs in an infinite loop",
    "Question 7 in Fall 2019 Midterm Exam [Intermediate]",
    "Write a C++ function void readInts() that repeatedly reads integers from the standard input (using cin) and then immediately outputs the input integer (using cout), one integer per line.",
    "When the end-of-file is reached, the function prints the message \"End of File Reached\" on a line by itself before returning.",
    "If a non-integer is input the function should print the message \"Invalid Input\" on a line by itself, should discard the rest of the stream and should continue reading integers again until the end-of-file is reached.",
    "In this chapter, we discuss different means of input-output (I/O) in C++.",
    "These are standard I/O, file I/O and string I/O streams.",
    "We then demonstrate ways to detect errors in inputs and how to handle them in a program.",
    "This is a small sample book to give you a feel for how book content is structured.",
    "This is a small sample book to give you a feel for how book content is structured.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 9 in Fall 2022 Midterm Exam [Intermediate]",
    "Write down the standard output of the following program.",
    "Remember to write two “Check Point”, since partial marks are given based on these “stop points”.",
    "You might find it helpful to write down the memory layout.",
    "Question 3 in Fall 2021 Final Exam [Intermediate]",
    "Consider the following code snippet that manipulates pointers in a main function of a C++ program.",
    "Which of the following statements (that come after the above snippets executes) prints 5 to the standard output?",
    "You may assume iostream is included and the std namespace is used.",
    "Choose all correct answers.",
    "cout << r;",
    "cout << *t;",
    "cout << *q;",
    "cout << *p;",
    "cout << **t;",
    "cout << *r;",
    "cout << *s;",
    "cout << (**s) / 2;",
    "cout << *p;",
    "cout << **t;",
    "cout << (**s) / 2;",
    "Question 4 in Fall 2018 Midterm Exam [Intermediate]",
    "Consider the following main function.",
    "The line numbers to the left are for reference and are not part of the code.",
    "What is the output produced by cout on line 14 of the code",
    "The output is",
    "The program may have a problem with it.",
    "What is the problem, if any?",
    "Circle only one answer.",
    "The program has no problem with it",
    "The program has a memory leak.",
    "The delete on line 17 should not dereference p_ptr, but use it directly.",
    "The program deletes the same region of memory more than once.",
    "2 and 3.",
    "2 and 4.",
    "2, 3 and 4.",
    "The program has a memory leak because in line 13, it changes what second_ptr is pointing to without freeing up the memory space it was pointing to.",
    "second_ptr , first_ptr , and *p_ptr are all pointing to an int with \\(4\\) , while there are three deletes for the same memory space.",
    "Question 2 in Fall 2017 Midterm Exam [Intermediate]",
    "Consider the following program.",
    "Assuming the C++ compiler does not optimize away copying of objects.",
    "Write the output produced by the program.",
    "Recall, this is a pointer to the object itself.",
    "a.increment_x() is evaluated first, and would increment the x of object a making x of a equal to 3.",
    "This would return a new object with x = 3 and y = 3 .",
    "On this new object, you would call increment_y() , which would increment y to 4 and return a new object with x = 3 and y = 4 .",
    "Printing this new object would produce (3,4) .",
    "Printing object a would output (3,3) due to the previous a.increment_x() call.",
    "In this chapter, we review pointers, double pointers to variables or objects.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 3 in Fall 2022 Midterm Exam [Easy]",
    "Consider the following C++ function:",
    "If somewhere in your main function you call AvadaKedavra(1) .",
    "Based on the memory layout discussed during the lecture, answer this question: from the time this function starts to execute to the time right before it returns, how many bytes are newly allocated on the stack and the heap, respectively?",
    "You may assume:",
    "all variables are put in the main memory.",
    "an int takes 4 bytes",
    "we have a 32-bit machine",
    "n : 4 bytes",
    "size : 4 bytes",
    "q : 4 bytes",
    "i : 4 bytes",
    "Total: 16 bytes",
    "n is 1, size is 2",
    "The loop iterates 3 times, each time it allocates 2 integers.",
    "Total is 3 * 2 * 4 bytes = 24 bytes.",
    "Question 9 in Fall 2021 Midterm Exam [Intermediate]",
    "Consider the code shown below.",
    "You can assume it compiles with no errors and runs.",
    "In the table below, give the values of the variables indicated in the table columns when program execution reaches each of the two points, Point 1 and Point 2.",
    "If a value cannot be obtained due to dereferencing a nullptr pointer, write nullptr (but assume the program does not stop).",
    " a *b **c *g *f",
    "Point 1     ",
    "Point 2     ",
    " a *b **c *g *f",
    "Point 1 1 1 1 nullptr 5",
    "Point 2 2 6 6 11 6",
    "Question 10 in Fall 2022 Midterm Exam [Challenging]",
    "A Vtuber is an online entertainer who posts videos on Vtube.",
    "A Vtuber will have followers on Vtube.",
    "As a programmer from Vtube, you are asked to implement a class for Vtuber.",
    "The class definition and description are described below.",
    "Specifically, Vtuber’s followers member variable is an array of pointers, each pointer pointing to a Follower object.",
    "The following graph illustrates it.",
    "Implement the constructor for Vtuber .",
    "Vtuber name should be initialized by _name , and follower_max should be initialized to 2.",
    "In addition, you should allocate an array called followers using new , with an initial size of 2 (the value of follower_max ).",
    "Every element in this array should be a pointer to an object of class Follower and initialize all these pointers to NULL .",
    "Every Vtuber in Vtube can get new followers or lose their current followers.",
    "This is implemented by two methods: insert_follower and remove_follower .",
    "Now you are asked to implement these two methods:",
    "For insert_follower, a follower name and follower age are given.",
    "You need to create a dynamically allocated object of Follower and insert it into the followers array (in the first available location), using new operator.",
    "If the array is full, you should double follower_max , allocate a new follower array, and move all the data into this new array, and insert the new follower.",
    "Write the code below.",
    "For remove_follower , a follower name is given.",
    "If there is any follower in the array matching the name, you should remove it and free its memory using delete .",
    "You can assume the follower names are all unique.",
    "Implement the destructor for the Vtuber class.",
    "You should free all the dynamically allocated objects using delete .",
    "Remember to be consistent with your previous implementation, as the entire program should not trigger any segmentation fault.",
    "In this chapter, we discuss dynamic memory allocation in C++.",
    "We delve deeply into dynamic memory allocation and de-allocation of objects.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 5 in Fall 2022 Midterm Exam [Easy]",
    "Consider the following program.",
    "Given the following contents of \"input.txt\" , write the output.",
    "Now you remove the infile.clear() from the code, so the program becomes:",
    "Question 2 in Fall 2021 Final Exam [Intermediate]",
    "Write a C++ function void readInts() that repeatedly reads integers from the standard input (using cin ) and then immediately outputs the input integer (using cout ), one integer per line.",
    "When a '.' character is encountered, the function prints the message Done on a line by itself and returns.",
    "If the user enters any characters other than integer digits or the '.' , the function prints the message Error on a line by itself and returns.",
    "You may assume the user will never enter eof .",
    "Thus, for example, if the user enters 51 16 700 .",
    ", the function prints:",
    "However, if the user enters 101 21 13 abc 444 , the function prints:",
    "Question 3 in Fall 2018 Midterm Exam [Intermediate]",
    "Consider the following program that uses stringstreams to read a command.",
    "The command has the following format:",
    "The command word is count and intArg is an integer argument.",
    "The command must have only one integer argument, e.g count 3 .",
    "The function handle_count performs the reading of the integer value.",
    "If the integer is valid, it returns true and updates the value of intArg .",
    "Otherwise, it returns false .",
    "Determine the number of arguments and the type of each argument and indicate them in the code above in the prototype of the function, handle_count .",
    "Further, indicate what parameters are passed to the function when it is invoked.",
    "Write your answers where indicated in the code above.",
    "You may not modify main by adding or removing line, other than by indicating the formal arguments in the function prototype and actual arguments of the function invocation.",
    "Write the header and body of the handle_count function below so it performs as indicated above.",
    "Question 6 in Fall 2019 Midterm Exam [Intermediate]",
    "For each of the following main functions, indicate the output produced in response to the user entering 1 2 3 4 five on the keyboard followed by the Enter key.",
    "Choose only one answer.",
    "Choose one the following choices:",
    "None; the program runs in an infinite loop",
    "14 The last loop when five is entered, num is unchanged and 4 will be added to sum again.",
    "However, in some compilers, sum may be printed to be 10, as the complier will set num to 0 when cin.fail() is raised.",
    "This means, 2.",
    "10 is considered correct too.",
    "Choose one the following choices:",
    "None; the program runs in an infinite loop",
    "Question 7 in Fall 2019 Midterm Exam [Intermediate]",
    "Write a C++ function void readInts() that repeatedly reads integers from the standard input (using cin) and then immediately outputs the input integer (using cout), one integer per line.",
    "When the end-of-file is reached, the function prints the message \"End of File Reached\" on a line by itself before returning.",
    "If a non-integer is input the function should print the message \"Invalid Input\" on a line by itself, should discard the rest of the stream and should continue reading integers again until the end-of-file is reached.",
    "In this chapter, we discuss different means of input-output (I/O) in C++.",
    "These are standard I/O, file I/O and string I/O streams.",
    "We then demonstrate ways to detect errors in inputs and how to handle them in a program.",
    "In C/C++, we can group together multiple data members of different data types in a data structure.",
    "For example, consider the following student structure:",
    "In this structure, we have grouped together a string and an integer.",
    "The struct definition does not involve any memory allocation.",
    "When we create an instance of the struct Student , only then a memory space is reserved for that instance.",
    "Multiple instances of the student structure x and y were created, and each one stores different values.",
    "To access data members of a structure, we use the dot operator ( .",
    ") on the instance.",
    "For example, to access the name data member of the x instance, we write x.name .",
    "Problem! However in line 15, when we wanted to print the data members of Student x , we had to access the name and ID to print them.",
    "Unfortunately, there cannot be functions, like a print function, associated with struct student to help us do a printing operation on Student x without accessing each data member.",
    "If there were many data members, the printing process would be challenging.",
    "A class is an expansion to structures in C/C++.",
    "It allows us to group data members and functions in a single unit.",
    "A class is a user-defined data type.",
    "Creating an instance of a class is called instantiation and the instance is called an object .",
    "Only object have memory allocated for them, but the class definition does not.",
    "You can think of a class as a template/blueprint for creating objects.",
    "To define a class, we use the class keyword followed by the class name.",
    "To divide code into multiple file, we will have the class definition in a header file, then function implementations for that class in a source file.",
    "For example, the following code defines a class Student with two data members name and ID .",
    "We also define a function print that prints the data members of the class.",
    "Code in Student.h",
    "Members in a class are private by default.",
    "This means that the name , ID and print cannot be used outside the class, for example, in the main function.",
    "To control access to the members of a class, we can use access specifiers/modifiers.",
    "The common two are private and public .",
    "These access modifiers allow us to dictate which members are:",
    "private : can only be used within a class, and",
    "public : can be used inside and outside the class.",
    "For example, we will re-write the class definition in Student.h to have name and ID as private members and print as a public member.",
    "name and ID can only be accessed within the class, while print can be accessed outside the class.",
    "Code in Student.h",
    "To understand further how access specifiers work, we need to create instances of the class and access the members.",
    "However, we cannot yet create instances of the class because we have not implemented the function members of Student .",
    "In a source file named Student.cpp , we will implement the function member of the class Student .",
    "The function print will print the data members of the class.",
    "Code in Student.cpp",
    "Lines 1 and 3.",
    "We include the iostream library and write using namespace std; to use cout in print .",
    "Line 2.",
    "We include the header file Student.h to access the class Student .",
    "Line 5.",
    "We define the function print that prints the data members of the class.",
    "print is being implemented outside of the class definition, which is in Student.h .",
    "Hence, we need to specify in Student.cpp in the function header that print is part of Student class.",
    "To do so, we append to the function name the class name Student and use the scope resolution operator :: , i.e., Student::print .",
    "We can then create instances of the class Student in the main function in main.cpp",
    "Fig. 2.1  Object  x  of class  Student  with uninitialized data members  name  and  ID . Data members are private and cannot be accessed outside the class. #",
    "Output is undefined",
    "Line 6.",
    "We create an instance of the class Student named x .",
    "This requires only the name of the class followed by the name of the object.",
    "In the memory, a memory space for object x is created.",
    "That space stores two data members: name and ID .",
    "Since name and ID are uninitialized, they will have garbage values denoted by ?",
    "Line 7 [Erroneous].",
    "We incorrectly attempt to access the data member name of the object x using the dot operator.",
    "However, we cannot access it because it is a private member of Student class.",
    "Line 8.",
    "We call the print function on the instance x .",
    "The output will be undefined because the data members name and ID are uninitialized .",
    "To help gain access to the private members of name and ID , we can create getter and setter functions.",
    "Getter functions are used to access/return the value of a private member, while setter functions are used to set the value of a private member.",
    "We will create getter and setter functions for only the name data member of the Student class.",
    "Code in Student.h",
    "In Student.h file, in lines 11 and 12, we add the function declarations for getName and setName functions to the Student class.",
    "getName : The getter for name will return the value of name and received nothing as an input.",
    "setName : The setter for name will receive a string as an input and assign it to name .",
    "Code in Student.cpp",
    "In Student.cpp file, in lines 14 to 20, we add the function implementations for getName and setName functions.",
    "Code in main.cpp",
    "Output (ID is undefined)",
    "In main.cpp file, in line 8, we invoke the setName function on object x , and pass \"Cindy\" to the function.",
    "This calls the setName() which is capable of accessing name member of x and set it to \"Cindy\" .",
    "Therefore, in line 9, when we invoke the getName function on object x , we return the value of name stored in object x .",
    "Then, we print it to the user as \"Cindy\" .",
    "In line 11, we are still invoking print() on x while it has an uninitialized ID .",
    "The output will be Name: Cindy and ID: <undefined> .",
    "getter cannot be used to modify",
    "Getters like getName return the value of a private member, but they cannot be used to modify the value of the private member.",
    "For example, we cannot write x.getName() = \"Cindy\" to change the value of name in object x .",
    "This is because getName returns a copy of the value of name , which cannot be assigned to another value.",
    "getName does not return a reference to name .",
    "In this section, we have learned about classes in C++.",
    "We have seen how to",
    "define a class,",
    "create instances of a class,",
    "access the members of a class,",
    "control access to the members of a class using access specifiers/modifiers, i.e. private and public ,",
    "implement functions in a class,",
    "create getter and setter functions to access private members of a class.",
    "In the next section, we will learn about how can we set private members of a class using constructors at the time of instantiation without need for setter functions.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 7 in Fall 2021 Midterm Exam [Easy]",
    "Consider the class definition shown below.",
    "Assume that iostream and string are included, and that the std namespace is used.",
    "Also assume that the class is correctly implemented.",
    "What is the output of the following main function?",
    "declaring b2 calls the default constructor",
    "new calls the second constructor",
    "new calls default constructor for b1",
    "b4 declaration calls the second constructor",
    "delete b3 would call the destructor for what b3 is pointing at.",
    "new Book[2] calls the default constructor twice.",
    "b4 goes out of scope and destructor is called.",
    "delete b1 would call the default destructor.",
    "Default destructor for b2 is called as we return from main , and b2 goes out of scope.",
    "We don’t have delete b5 , and hence the destructor is not called for the two-element array.",
    "Question 1 in Fall 2022 Midterm Exam [Easy]",
    "Consider the following C++ program.",
    "There are three statements in the main function: A, B, and C.",
    "Which of these three statements will trigger compile-time errors?",
    "In statement A, num_student is a private data member and cannot be accessed outside the class.",
    "In statement C, get_num_instructor() is a private function member, and cannot be accessed outside the class.",
    "Modified Question 9 in Fall 2018 Midterm Exam [Challenging]",
    "Consider the following definition/implementation of a class called Shape that appears in the file: Shape.h .",
    "The following is a main program that uses the above class.",
    "What is the output of the program?",
    "Select one of the answers from the table below.",
    "Note that the destructor is called when an object goes out of scope.",
    "In this chapter, we discuss classes, which is an expansion of struct s.",
    "Classes incorporate data, like structs, and methods/functions, new in classes.",
    "Classes can be thought of as creating your own user-defined data type, and creating a variable of this data type is considered instantiating an “object”.",
    "Different objects from the same class have different data members stored in the memory.",
    "By default, constructors are called when an object is instantiated, and destructors are called when an object is destroyed.",
    "In C/C++, we can group together multiple data members of different data types in a data structure.",
    "For example, consider the following student structure:",
    "In this structure, we have grouped together a string and an integer.",
    "We create multiple instances of this structure x and y and store different values in each instance.",
    "To access data members of a structure, we use the dot operator ( .",
    "For example, to access the name data member of the x instance, we write x.name .",
    "Problem! However, when we wanted to print the data members of Student x , we had to access the name and ID to print them.",
    "Unfortunately, there cannot be any functions, like a print function, associated with struct student to help us do a printing operation on Student x .",
    "A class is an expansion to",
    "In the previous section, we learned about classes and how to define them.",
    "We saw private and public members, and the need for getter and setter functions to access and modify private members.",
    "In this section, we will learn about constructors, which are special member functions of a class that are called when an object of the class is instantiated.",
    "Constructors are used to initialize the members of a class when an object is created.",
    "Recall the example of the Student class, we used in the previous section.",
    "Code in Student.h",
    "Code in Student.cpp",
    "Code in main.cpp",
    "Problem! As we create the object x , the value of name and ID are uninitialized .",
    "It is a good practice to initialize value of variables as we declare them to avoid having undefined behavior resulting from uninitialized variables.",
    "For example, in line 11, the output of the program is undefined as the value of ID is not initialized.",
    "Solution! To initialize the members of a class when an object is created, we can use a constructor .",
    "A constructor is a special member function of a class that is given by default when a class is defined.",
    "It is called automatically when an object is created.",
    "By default, the constructor is an empty function that does nothing.",
    "This is called a default constructor .",
    "We can define our own constructor to initialize the members of a class when an object is created.",
    "The constructor has",
    "the same name as the class",
    "no return type (not even void )",
    "called when an object is created, but never called explicitly",
    "must be a public member",
    "Let’s define a constructor for the Student class to initialize the name and ID members.",
    "Code in Student.h",
    "In Student.h file, in line 10, we add the constructor declaration to the Student class.",
    "The constructor is a function with the same name as the class and no return type .",
    "Code in Student.cpp",
    "In Student.cpp file, we add the constructor implementation for the Student class.",
    "No return type is specified for the constructor.",
    "We are setting the value of ID to 0 and name to \"no name\" in the default constructor.",
    "Code in main.cpp",
    "In main.cpp file, we create an object x of the Student class.",
    "The constructor is called automatically when the object is created.",
    "The value of name and ID are initialized to \"no name\" and 0 , respectively.",
    "The output of the program is now defined.",
    "Student y[10]; creates an array of 10 Student objects.",
    "The constructor is called for each object in the array, i.e. , the constructor is called 10 times.",
    "Student *z; creates a pointer z to a Student object.",
    "The pointer is not initialized and has a garbage address.",
    "The constructor is not called as no object is created.",
    "The constructor is called when an object is created, not when a pointer is created.",
    "As we have seen, the default constructor has no parameters passed to it .",
    "What if we want to initialize the members of a class with some values when an object is created?",
    "We can define our own constructor with parameters.",
    "These are called parameterized constructors .",
    "Code in Student.h",
    "In Student.h file, we add two more constructors to the Student class.",
    "The first constructor in line 7 takes an integer parameter id and initializes the ID member with the value of id , and sets the name member to \"no name\" .",
    "The second constructor in line 8 takes an integer parameter id and a string parameter n and initializes the ID and name members with the values of id and n , respectively.",
    "Code in Student.cpp",
    "In Student.cpp file, we add the implementation for the two new constructors.",
    "The first constructor in lines 10-13 initializes the ID member with the value of id and sets the name member to \"no name\" .",
    "The second constructor in lines 15-18 initializes the ID and name members with the values of id and n , respectively.",
    "Code in main.cpp",
    "In the main function, we create three objects x , y , and z of the Student class.",
    "The default constructor is called for object x , the first constructor is called for object y , and the second constructor is called for object z .",
    "The value of name and ID members are initialized accordingly as shown in the output.",
    "How is it possible to have multiple constructors with same name but different number of parameters?",
    "The constructors are distinguished by the number of parameters passed to them.",
    "The compiler determines which constructor to call based on the number of parameters passed to it.",
    "Defining multiple constructors with the same name but different number of parameters is called function overloading .",
    "This is used for other functions as well, not just constructors.",
    "If the default constructor is not defined, the compiler will provide one.",
    "However, if any constructor is defined, for example, the first constructor in the example above, the compiler will not provide the default constructor.",
    "In that case, for example, Student x; will result in a compilation error as the default constructor Student::Student() is not defined.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 11 in Fall 2018 Final Exam [Easy]",
    "Consider the following class definitions and implementations, as well as a main function that uses them.",
    "All the code appears in one file and it compiles with no errors.",
    "Indicate what each statement in the above main function prints, using the table below.",
    "If no output is produced, write “NONE”.",
    "Statement Output",
    "firstOne   a; ",
    "firstOne   b(\"G\"); ",
    "secondOne   c   (   \"N\"); ",
    "secondOne   d(8); ",
    "Statement Output",
    "firstOne   a; Constructor 1 of firstOne done",
    "firstOne   b(\"G\"); Constructor 2 of firstOne done",
    "secondOne   c   (   \"N\"); Constructor 1 of firstOne done Constructor 1 of secondOne done",
    "secondOne   d(8); Constructor 2 of firstOne done Constructor 2 of secondOne done",
    "Question 14 in Fall 2019 Final Exam [Easy]",
    "Consider the following class definitions and implementations of classes, Shape and Circle .",
    "They are followed by a main function that utilizes these classes.",
    "Indicate which of the following statements that appear in the main function compile with no errors or produce a compile time error.",
    "Indicate also the reason in the table below.",
    "Code snippet Does the code snippet compile? If yes, Why?",
    "Shape   s; ",
    "Circle   c; ",
    "Rectangle   r;     r.setID(9) ",
    "Rectangle   d;     d.length   =   3.0; ",
    "Code snippet Does the code snippet compile? If yes, Why?",
    "Shape   s; No, an object of an abstract class cannot be created",
    "Circle   c; No, Circle is an abstract class too as it doesn’t implement print",
    "Rectangle   r;     r.setID(9) Yes",
    "Rectangle   d;     d.length   =   3.0; No, Rectangle::length is a protected data member that cannot be accessed outside the class",
    "Question 12 in Fall 2018 Final Exam [Intermediate]",
    "Consider the following base and derived classes.",
    "They compile with no errors.",
    "Consider each of the following main functions that use the above classes.",
    "You may assume that each main function includes the code of the classes above, including the #include ’s and the using namespace std;",
    "For each main function, indicate if the function compiles with no errors or not (ignore warnings).",
    "If the function compiles with no errors, then indicate the output produced by the function?",
    "Does the program compile with no errors?",
    "If it does compile with no errors, what is the output produced by the execution?",
    "No, it doesn’t compile.",
    "We cannot create objects of abstract classes.",
    "Does the program compile with no errors?",
    "If it does compile with no errors, what is the output produced by the execution?",
    "Yes, the program compiles.",
    "delete pc calls the destructor of Desert only as pc is a pointer of type Desert .",
    "We cannot access the destructor of Cookies through pc .",
    "delete pi calls the destructor of IceCream first, then the destructor of Desert .",
    "pi is of type IceCream , and through it we can access both destructors.",
    "No, the program doesn’t compile.",
    "ps = pi; is not valid.",
    "Sundae is derived from IceCream .",
    "ps cannot point to an object IceCream , as it cannot access its members that don’t exist.",
    "Yes, the program compiles.",
    "ps->cost() will call the cost() of IceCream as cost() is a virtual function, hence ps will call the function according to the type of the object, not the pointer.",
    "Question 15 in Fall 2019 Final Exam [Easy]",
    "Consider the following class definitions.",
    "The following declaration appears in the nohelp member function of the class DerivedC .",
    "Indicate whether the following statements is correct code (i.e., compiles with no errors), or incorrect code (i.e., generates a compile time error).",
    "Assume the statements in the rows of the table also appear in the nohelp member function of the class DerivedC .",
    "Statement Correct/Incorrect",
    "derived.a   =   8; ",
    "derived.b   =   10; ",
    "derived.x   =   12; ",
    "derived.w   =   4; ",
    "Statement Correct/Incorrect",
    "derived.a   =   8; Incorrect ( a  is a private member of the  Base  class)",
    "derived.b   =   10; Correct ( b  is protected in  Base  and can be access in  DerivedC )",
    "derived.x   =   12; Correct ( x  is private member of the  DerivedC  class and can be accessed in  DerivedC )",
    "derived.w   =   4; Correct ( w  is a public member of  DerivedC )",
    "Question 16 in Fall 2019 Final Exam [Intermediate]",
    "Consider the following base and derived classes.",
    "They compile with no errors.",
    "Consider each of the following main functions that use the above classes.",
    "You may assume that each main function includes the code of the classes above, including the #include ’s and the using namespace std; .",
    "For each main function, if the function compiles with no errors (ignore warnings), then write the output produced by the function.",
    "If the function compiles with errors, then write: “compile errors”.",
    "We assume that p is destructed before c .",
    "The tricky part is that delete pr will execute the destructor of the type of pr , since the destructor is not a virtual function.",
    "Compile-time error for line c = new CircuitElement(5); , as you cannot make a pointer to a derived object c point to a base object CircuitElement .",
    "Compile-time error for line pr = r; , as pr is a pointer of derived object that cannot point to a base object.",
    "We assume we destruct e then p .",
    "It is possible to do e = r as e is a base object and r is derived.",
    "We can make a base object point to a derived object, hence CircuitElement* e = new PowerCapacitor(500, 1000); is possible.",
    "Since the print() function is virtual in CircuitElement , it is virtual in all derived classes.",
    "Therefore when e->print() is executed, the print() function of the object e is pointing, which is PowerCapacitor to is called.",
    "The getPower function is not virtual, therefore when c->getPower() is called we call the getPower function of Capacitor – the type of c .",
    "Since the memory is dynamically allocated and not freed, no destructors are called before returning from main .",
    "Compile-time error.",
    "The error exists at r->powerResistance() .",
    "powerResistance() is not a virtual function, hence when r->powerResistance() is executed, powerResistance() of Resistor is called.",
    "There is no member named powerResistance in Resistor class.",
    "Question 5 in Fall 2022 Final Exam [Intermediate] :",
    "The University of Toronto wants to manage students from different departments using a C++ program.",
    "Students from all departments will share the following base class:",
    "Derived from student class, the programmers then write another class for engineering students.",
    "All engineering students have access to the ECF server:",
    "Derived from eng_student , programmers then write two classes for ECE students and MIE students.",
    "Unlike MIE students, ECE students have their designated server called UG server:",
    "In addition, programmers write a new derived class for Computer Science (CS) students.",
    "Unlike engineering students, they use Markus servers instead of ECF servers:",
    "Read the implementations of these five classes carefully and answer the following questions.",
    "You write the following piece of code to declare four students.",
    "However, you get a compile-time error.",
    "Why doesn’t it compile?",
    "(Note: you don’t need to fix anything in the class declarations and implementations given above.)",
    "student class is an abstract function.",
    "eng_student inherits from student class; however, it is an abstract class too as it did not implement print_department pure virtual function that was in student class.",
    "Now, an array named student_list is declared and initialized as follows.",
    "Write the output generated by std::cout .",
    "new cs_student(\"Leo\", 0, 10) would call the constructor of the base class student , then derived class cs_student .",
    "This prints.",
    "new ece_student(\"Bill\", 1, 11, 0) would call the constructor of the base class student , then eng_student , then ece_student .",
    "This prints.",
    "The same idea follows for new mie_student(\"Ellie\", 2, 12) and new ece_student(\"Haley\", 3, 13, 1) .",
    "After the student_list initialized in question 2, the following for loops will be executed.",
    "What will be the output generated by these two loops?",
    "Since print_department(); and print_server() are virtual functions, the function invoked would be determined based on the type student_list[i] points to.",
    "In the student_list array, we have CS, ECE, MIE and ECE, and these would be the objects on which the functions get invoked.",
    "This chapter delves into the concept of inheritance, a fundamental aspect of object-oriented programming where classes inherit properties from other classes.",
    "Through inheritance, we achieve enhanced code reusability and improved modularity, streamlining the development process and fostering more efficient programming practices.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "In progress!",
    "In progress!",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 16 in Fall 2021 Final Exam [Intermediate]",
    "For each code snippet, specify the worst case complexity using the Big-O notation.",
    "Think of it as \\(n \\times (j^2 < n \\rightarrow j < \\sqrt{n} = ) \\sqrt{n} = n^\\frac{3}{2}\\)",
    "Think of it as \\(n \\times 1000000 = n\\)",
    "The outer loop goes from 1, 2, 4, 8, 16 …",
    "To reach \\(n\\) , this takes \\(\\log(n)\\) steps.",
    "Think of it as \\(\\log(n) \\times n\\)",
    "Question 17 in Fall 2021 Final Exam [Intermediate]",
    "Two students were asked to write a recursive function that given a positive integer n , computes \\(2^n\\) .",
    "Amy wrote the following function:",
    "John wrote the following function:",
    "Answer the following question about code written by Amy and John.",
    "Is Amy’s function correct (does it compute and return \\(2^n\\) )?",
    "Is John’s function correct (does it compute and return \\(2^n\\) )?",
    "What is the worst-case complexity of Amy’s function using Big-O notation?",
    "What is the worst-case complexity of John’s function using Big-O notation?",
    "\\(T(n) = T(n - 1) + c\\)",
    "\\(T(n) = T(n - 2) + 2c\\)",
    "In progress!",
    "In this chapter, we discuss how do we evaluate the performance of algorithms based on the run time given an input size.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 6 in Fall 2021 Final Exam [Intermediate]",
    "The following is the definition of the class ListNode which represents a node in a linked list.",
    "All the members are public for simplicity.",
    "The head node of the linked list is pointed to by head .",
    "The following is a non-member function to traverse the linked list.",
    "However, some content from the function is removed, as shown by the comments.",
    "What are the removed lines?",
    "What should Line 1 removed be replaced with?",
    "Choose one answer.",
    "cout << h->key << endl;",
    "cout << ptr->key << endl;",
    "cout << (*h)->key << endl;",
    "cout << (*ptr)->key;",
    "cout << h->key << endl;",
    "What should the <condition removed> be?",
    "Choose one answer.",
    "ptr != nullptr",
    "*ptr == nullptr",
    "*ptr != h",
    "ptr != *h",
    "All are incorrect.",
    "The correct answer is *ptr != nullptr",
    "What should Line 2 removed be replaced with?",
    "Choose one answer.",
    "cout << ptr->key << endl;",
    "cout << (*ptr).key << endl;",
    "cout << &(*ptr)->key << endl;",
    "cout << (*ptr)->key << endl;",
    "What should Line 3 removed be replaced with?",
    "Choose one answer.",
    "ptr = &((*ptr)->next);",
    "ptr = (*ptr)->next;",
    "ptr = ptr->next;",
    "ptr = (*ptr).next;",
    "ptr = &((*ptr)->next);",
    "Question 7 in Fall 2021 Final Exam [Intermediate]",
    "It is desired to implement an efficient deletion function in a linked list.",
    "You are given a linked list pointed to by head and a pointer ptr to a node in a linked list, which is guaranteed not to be the last node on the list ( i.e. , not the tail node ).",
    "Write a function removeNode that removes this node from the list.",
    "You should not iterate the nodes in the list.",
    "You may assume the following is the definition of the class, ListNode .",
    "The head node of the linked list is pointed to by head .",
    "Write your answer below.",
    "You are not allowed to change the function’s argument or return type.",
    "Question 8 in Fall 2021 Final Exam [Intermediate]",
    "You are provided with an implementation of a linkedList class as well as a listNode class.",
    "The linkedList class is shown below, you may assum every function is correctly implemented.",
    "We wish to implement a myQueue class that represents a queue .",
    "A queue is a data structure in which all insertions are done on one end, called the back and all deletions are done on another end called the front .",
    "The myQueue class looks has the following definition:",
    "You are required to implement the following functions of the queue class to have the mentioned functionality.",
    "Note that the only private data member of myQueue is a linkedList named data .",
    "Implement the void push_back(int k) function.",
    "In this function, a new node with value of k is added at the back of the queue.",
    "Implement the int front() function.",
    "In this function, the value of the key of the front node in the queue is returned and no updated happen to the queue.",
    "If the queue is empty -1 is returned.",
    "Implement the bool isempty() function which returns true if there are no nodes in the queue and false otherwise.",
    "Implement the int pop_front() function.",
    "In this function, the value of the key of the front of the queue is returned and the node at front is removed from the queue.",
    "If the queue is empty, -1 is returned.",
    "Question 6 in Fall 2019 Final Exam [Intermediate]",
    "Circular linked lists are a variation on linked lists described in class.",
    "In a circular linked list, the next field in the last node in the list is not set to NULL (or nullptr).",
    "Rather, the field is made to point to the first node in the list, hence the name “circular”.",
    "An example of a circular linked list is shown below.",
    "Consider the class ListNode shown below.",
    "It represents a node in a circular linked list.",
    "It is similar to the one described in class and that you implemented in the labs, but all members are public for simplicity.",
    "The declaration of a head pointer, which points to the head of the list, is also shown.",
    "Write a non-member function traverse ListNode* h that traverses the linked list.",
    "The function is invoked as traverse(head) to start the traversal at the head of the list.",
    "In the traversal, visiting a node is simply printing its id field to cout .",
    "Write a non-member function deleteNode(ListNode*& h, ListNode* p) that deletes the node after the one pointed to by p from the circular list pointed to by h.",
    "The function is invoked as deleteNode(head, ptr) , where ptr is guaranteed to point to one of the nodes on the list.",
    "It is sometimes not known if the linked list pointed to by head is circular or just a regular linked list with the next field in the last node set to NULL .",
    "Write a non-member function isCircular(ListNode* h) that returns true if the list is circular and false otherwise.",
    "The function is invoked as isCircular(head) .",
    "In this chapter, we discuss linked lists in object-oriented programming.",
    "We see the need for a copy constructor, destructor, and assignment operator.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "In progress!",
    "In progress!",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 2 in Fall 2019 Midterm Exam [Intermediate]",
    "Consider the definition of a class called Nova , which is in the file Nova.h .",
    "Now consider the following program that uses the Nova class.",
    "The program compiles and runs correctly.",
    "What members of the class Nova must exist for the above code to compile with no errors?",
    "Give variable declarations and/or method prototypes in the table below.",
    "Note that you may or may not need to fill every row in the table.",
    "Variable Declaration or Method Prototype",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Variable Declaration or Method Prototype",
    "Nova(int,   double);",
    "int   it;",
    "void   setAll(int,double);",
    "operator+(Nova&)",
    "bool   operator!=(Nova&)",
    "No need for destructor as I don’t dynamically allocate space in the object.",
    "No need for a copy constructor in Nova b(a) since one is given by default.",
    "No need for operator= in *p = a + b",
    "Question 7 in Fall 2018 Midterm Exam [Intermediate]",
    "The following is the definition/implementation of a class called Foo .",
    "Compiling the above definition/implementation results in one or more errors.",
    "Re-write the class so it is error-free.",
    "Write your answer (the entire definition/implementation) in the box below.",
    "You may want to underline in your answer below the changes you made.",
    "The copy constructor should take its argument as a const reference.",
    "Otherwise, it will call itself infinitely.",
    "Line 7 changed to add & after const Foo .",
    "The assignment operator (operator=) should not be declared const as we want to change priv in line 8.",
    "The assignment operator (operator=) returns Foo& , while this is Foo* type.",
    "Change this to *this in line 10.",
    "Question 9 in Fall 2018 Midterm Exam [Intermediate]",
    "Consider the following definition/implementation of a class called Shape that appears in the file: Shape.h .",
    "The following is a main program that uses the above class.",
    "What is the output of the program?",
    "Select one of the answers from the table below.",
    "Grade Output",
    "A Constructor 2 5 Constructor 3 5 Constructor 3 5 Operator= 5 Destructor Constructor 1 0 Constructor 1 0 Constructor 3 5 Operator= 0 Destructor 5 5 5 Destructor Destructor Destructor",
    "B Constructor 2 5 Constructor 3 5 Constructor 3 5 Operator= 5 Destructor Constructor 1 0 Constructor 1 0 Constructor 3 5 Operator= 0 Destructor 5 Constructor 3 5 5 Destructor 5 Destructor Destructor Destructor",
    "C Constructor 2 5 Constructor 1 0 Constructor 1 0 Constructor 3 5 Constructor 3 5 Operator= 0 Destructor Constructor 3 5 Operator= 0 Destructor Constructor 3 5 Operator= 5 Destructor Constructor 1 0 Constructor 1 0 Constructor 3 5 Operator= 0 Destructor 5 Constructor 3 5 5 Destructor 5 Destructor Destructor Destructor Destructor Destructor",
    "D Constructor 2 5 Destructor Constructor 1 0 Constructor 1 0 Destructor 5 5 Destructor 5 Destructor Destructor Destructor",
    "E Constructor 2 5 Constructor 3 5 Constructor 3 5 Operator= 5 Destructor Constructor 1 0 Constructor 1 0 Constructor 3 5 Operator= 0 Destructor 5 Constructor 3 5 5 Destructor Constructor 3 5 5 Destructor Destructor Destructor Destructor",
    "F Constructor 2 5 Constructor 3 5 Constructor 3 5 Destructor Constructor 1 0 Constructor 1 0 Constructor 3 5 Destructor 5 Constructor 3 5 5 Destructor 5 Destructor Destructor Destructor",
    "G None of the above",
    "G (and B is acceptable too)",
    "The output is very similar to B, except for swapping 5 and Destructor in the following.",
    "Question 8 in Fall 2021 Midterm Exam [Intermediate]",
    "Consider the definition of a class called Mystery , which is in the file Mystery.h .",
    "Now consider the following program that uses the Mystery class.",
    "The program compiles and runs correctly.",
    "What public members of the class Mystery must exist (either written by the programmer or given by C++) for the above code to compile with no errors?",
    "Non-member functions are not allowed.",
    "Write necessary variable declarations and/or method prototypes.",
    "Question 8 in Fall 2022 Midterm Exam [Challenging]",
    "Vector is widely used in the engineering and science world.",
    "Suppose we create a class called vector_2d .",
    "It can be used to represent a 2D vector, with x and y as its values.",
    "The partial code of this vector is shown below.",
    "Implement operator+= for vector_2d , as a member function.",
    "If a = <x1, y1> and b = <x2, y2> , after a += b , a becomes <x1 + x2, y1 + y2> whereas b is unchanged.",
    "Write no more than 5 lines of code.",
    "NOTE: the return type cannot be void , because we need to support chained += .",
    "Example: a += b += 2; which is equivalent to: b += 2; a += b;",
    "Question 14 in Fall 2019 Midterm Exam [Intermediate]",
    "The following class is used to create objects that represent ordinary fractions n/d , consisting of a numerator n and a denominator d .",
    "We wish to overload the * operator for the Fraction class to be able to write code like this in a non-member function (say main):",
    "For example, if X represents 1/5 and Y represents 4/6 then X * Y results in an object that represents 4/30 , while X * 2 results in an object that represents 2/10 .",
    "That is, both the numerator and denominator are multiplied by 2 .",
    "Write the implementation of the two overloaded operator functions as members of the class Fraction.",
    "Clearly show the function header and its body.",
    "Overload the multiplication operator * as a member of the class Fraction to be able to perform the first multiply operation (see comment above).",
    "Be sure to indicate both the header and the body of the method.",
    "You need not worry about using const modifiers.",
    "Overload the multiplication operator * as a member of the class Fraction to be able to perform the second multiply operation (see comment above).",
    "Be sure to indicate both the header and the body of the method.",
    "You need not worry about using const modifiers.",
    "In this chapter, we discuss a few operators such as assignment = , addition + operators that we can specify what happens when we use them on objects.",
    "This is a small sample book to give you a feel for how book content is structured.",
    "This is a small sample book to give you a feel for how book content is structured.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 7 in Fall 2021 Midterm Exam [Easy]",
    "Consider the class definition shown below.",
    "Assume that iostream and string are included, and that the std namespace is used.",
    "Also assume that the class is correctly implemented.",
    "What is the output of the following main function?",
    "declaring b2 calls the default constructor",
    "new calls the second constructor",
    "new calls default constructor for b1",
    "b4 declaration calls the second constructor",
    "delete b3 would call the destructor for what b3 is pointing at.",
    "new Book[2] calls the default constructor twice.",
    "b4 goes out of scope and destructor is called.",
    "delete b1 would call the default destructor.",
    "Default destructor for b2 is called as we return from main , and b2 goes out of scope.",
    "We don’t have delete b5 , and hence the destructor is not called for the two-element array.",
    "Question 1 in Fall 2022 Midterm Exam [Easy]",
    "Consider the following C++ program.",
    "There are three statements in the main function: A, B, and C.",
    "Which of these three statements will trigger compile-time errors?",
    "In statement A, num_student is a private data member and cannot be accessed outside the class.",
    "In statement C, get_num_instructor() is a private function member, and cannot be accessed outside the class.",
    "Modified Question 9 in Fall 2018 Midterm Exam [Challenging]",
    "Consider the following definition/implementation of a class called Shape that appears in the file: Shape.h .",
    "The following is a main program that uses the above class.",
    "What is the output of the program?",
    "Select one of the answers from the table below.",
    "Note that the destructor is called when an object goes out of scope.",
    "In this chapter, we discuss classes, which is an expansion of struct s.",
    "Classes incorporate data, like structs, and methods/functions, new in classes.",
    "Classes can be thought of as creating your own user-defined data type, and creating a variable of this data type is considered instantiating an “object”.",
    "Different objects from the same class have different data members stored in the memory.",
    "By default, constructors are called when an object is instantiated, and destructors are called when an object is destroyed.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "In progress!",
    "In progress!",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "In progress!",
    "In progress!",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 9 in Fall 2021 Final Exam [Intermediate]",
    "Write a recursive function that replaces each element of an array of positive integers with its prefix sum .",
    "The prefix sum of an element is the sum of the element and all the elements that are at smaller indices than it.",
    "For example, for the 4-element array, int arr[] = {1, 2, 3, 4}; , the function replaces the elements of the array to be {1, 3, 6, 10} .",
    "The function has the following prototype:",
    "and is initially invoked for an array A as follows: prefix(arr, 0, n-1, 0); .",
    "Question 8 in Fall 2019 Final Exam [Intermediate]",
    "Write a recursive function called reverseArray that reverses an n-element array in-place, i.e., without using an additional array.",
    "For example, given int arr[] = {1, 2, 3, 4, 5, 6, 7}; , the function changes the array to have {7, 6, 5, 4, 3, 2, 1} .",
    "That is, the reverseArray function swaps elements a[i] with element a[n - i - 1] .",
    "For an n-element array, the function is called like this: reverseArray(a, 0, n-1); .",
    "Write your answer below.",
    "You are not allowed to use any loops in your solution.",
    "In this chapter, we review recursive functions, and how to think recursively.",
    "We also introduce the process of backtracking in recursive functions.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "Question 10 in Fall 2021 Final Exam [Easy]",
    "Consider the following binary tree.",
    "The keys of the nodes are shown below inside the nodes.",
    "What is the preorder traversal of the tree?",
    "1 2 3 4 5 6 7",
    "(NLR) Nodes are visited recursively printing root node, left subtree then right subtree.",
    "This means when you print the left subtree, print it also by starting with the root, left node, then right node.",
    "What is the inorder traversal of the tree?",
    "3 2 4 1 5 7 6",
    "(LNR) Nodes are visited recursively printing left subtree, root node, then right subtree.",
    "This means when you print the left subtree, print it also by starting with the left node, root node, then right node.",
    "What is the postorder traversal of the tree?",
    "3 4 2 7 6 5 1",
    "(LRN) Nodes are visited recursively printing left subtree, right subtree, then root node.",
    "This means when you print the left subtree, print it also by starting with the left node, right node, then root node.",
    "Question 9 in Fall 2022 Final Exam [Intermediate]",
    "A binary tree is symmetric if the root node’s left subtree is exactly a mirror reflection of the right subtree.",
    "For example, the tree on the left is symmetric, but the tree on the right is not.",
    "Fig. 12.1  This tree is symmetric #",
    "Fig. 12.2  This tree is not symmetric #",
    "Now, you are asked to complete the function is_symmetric .",
    "It should return true if and only if the root is a symmetric tree.",
    "You should fill out the recursive helper function is_symmetric_helper to make is_symmetric work as expected.",
    "Hint: you should write less than 15 lines of code.",
    "Complete the helper function is_symmetric_helper .",
    "In progress!",
    "In this chapter, we discuss a new data structure: binary search trees.",
    "Binary search Trees (BSTs) are known to allow for faster operations on searching and inserting.",
    "Many of these exercises are taken from past exams of ECE 244 Programming Fundamentals courses at University of Toronto.",
    "The solutions are provided in the answer boxes.",
    "Headings in this page classify the exercises into different categories: [Easy] , [Intermediate] , and [Challenging] .",
    "I suggest you start by easy exercises and work your way up to the challenging ones.",
    "In progress!",
    "In progress!"
]
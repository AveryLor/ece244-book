[[exercises]]
title = "Question 2 in Winter 2018 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart= false

question = """
Writea single C statement — which contains exactly one terminating semi-colon (`;`), and does
not contain brace brackets (`{` or `}`) — that declares a `bool` variable named `isHighlighted`, and
sets its value to true if and only if the value stored in an integer variable named `characterCount`
is an **even positive** number. Assume that the variable `characterCount` has already been declared
and initialized.
"""

answer = """ 
bool isHighlighted = characterCount % 2 == 0 && characterCount > 0; """


[[exercises]]
title = "Question 2 in Winter 2019 Midterm Exam"
difficulty = "Easy"
table = false
type = "explaination"
multipart= false

question = """
Write a single C statement that declares a boolean-type variable named `divisible` and assigns
true to divisible if and only if the value stored in the int variable named `numOfItems` is exactly
divisible by $5$ or $7$. Assume that variable `numOfItems` has been declared and initialized.
"""

answer = """ 
bool divisible = numOfItems % 5 == 0 || numOfItems % 7 == 0; """


[[exercises]]
title = "Question 7 in Winter 2018 Final Exam"
difficulty = "Easy"
type = "multiple-choice"
table = false
multipart= true

question = """
Evaluate the following relational expressions by circling the right answer.
"""

question-code = """ '\\O' == 0
"""
answer = [0]

choices = [
  "True",
  "False"
]

explanations = ["True, since \\0 has ASCII code of zero"]


[[exercises]]
title = "Question 7 in Winter 2018 Final Exam"
difficulty = "Easy"
type = "multiple-choice"
table = false
multipart = true

question = """ 
"""

question-code = """ int x = 10 % 8;
(x > 0) && (x % 2 == 0) && !false
"""

answer = [0]

choices = [
  "True",
  "False"
]
explanations = ["True, since x stores 2"]


[[exercises]]
title = "Question 7 in Winter 2018 Final Exam"
difficulty = "Easy"
type = "multiple-choice"
table = false
multipart = true

question = """ 
"""

question-code = """ 'c' - 3 == 'a'
"""

answer = [1]

choices = [
  "True",
  "False"
]
explanations = ["False, since 'c' - 2 == 'a'"]


[[exercises]]
title = "Question 7 in Winter 2018 Final Exam"
difficulty = "Easy"
type = "multiple-choice"
table = false
multipart = true

question = """ 
"""

question-code = """ 
int w = rand() % 75 * 2 - 99;
(w < -99) || (w > 49);
"""

answer = [1]

choices = [
  "True",
  "False"
]
explanations = ["False, since the range of random numbers in w is between -99 and 49 inclusive"]




[[exercises]]
title = "Modified version of Question 7 in Winter 2019 Midterm Exam"
difficulty = "Easy"
type = "programming"
table = false
multipart= false

question = """
Write C program to find the median, which is the number at the middle, among three integers `p`, `q` and `r`. 
The program should prompt the user to enter three integers, which get stored in `p`, `q` and `r`. Your program 
should print the value of the number at the middle. For example, with integers $2$, $7$, and $5$ as input, the 
function returns 5; with integers $6$, $4$, and $6$ as input, the function returns $6$.

"""

starter-code = '''
#include <stdio.h>

int main(void) {

}
'''

answer = '''
#include <stdio.h>
int main(void) {
  int p = 0, q = 0, r = 0;
  printf("Enter three integers: ");
  scanf("%d %d %d", &p, &q, &r);

  if ((p >= q && p <= r) || (p >= r && p <= q)) {
    printf("%d", p);
  } else if ((q >= p && q <= r) || (q >= r && q <= p)) {
    printf("%d", q);
  } else {
    printf("%d", r);
  }
}
'''

[[exercises]]
title = "Modified Version of Question 4 in Winter 2022 Midterm Exam"
difficulty = "Easy"
type = "programming"
table = false
multipart= false

question = """
The following program finds the middle character, e.g., if we have `a = 'a'`, `b = 'b'`, and `c = 'c'`, the program prints `b`. Rewrite this function such that it only uses one `printf` and one nested `if-else` statement.

```{code-block} c
#include <stdio.h>

int main(void) {
  char a = '\\0', b = '\\0', c = '\\0';
  printf("Enter three characters: ");
  scanf("%c %c %c", &a, &b, &c);
  if (a < b) {
    if (b < c) {
      printf("%c", b);
    } else if (a < c) {
      printf("%c", c);
    } else {
      printf("%c", a);
    }
  }

  if (c < b) {
    printf("%c", b);
  }
  if (a < c) {
    printf("%c", a);
  }
  printf("%c", c);
}
```

"""

starter-code = '''
#include <stdio.h>

int main(void) {

}
'''

answer = '''
#include <stdio.h>

int main(void) {
  char a = '\0', b = '\0', c = '\0';
  printf("Enter three characters: ");
  scanf("%c %c %c", &a, &b, &c);

  char result = a;

  if ((a < b && b < c) || (c < b && b < a)) {
    result = b;
  } else if ((a < c && c < b) || (b < c && c < a)) {
    result = c;
  }

  printf("%c", result);
}
'''


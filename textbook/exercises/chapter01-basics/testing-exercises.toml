[[exercises]]
question-id = "chapter-01-Q1"
title = "Question 2 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart= false

question = '''
When you compile the following program, what happens? If there is an error, explain what the error is (one sentence max).

```{code-block} cpp 
#include <iostream>
using namespace std;

int main() {
  hello(1);
  return 0;
}
void hello(int i) {
  cout << "Hello !" << i << endl;
  return;
}
```
'''

answer = ''' 
There will be a compilation error because hello() is called before it's declared.
'''


[[exercises]]
question-id = "chapter-01-Q2"
title = "Question 4 in Fall 2022 Midterm Exam"
difficulty = "Easy"
table = false
type = "tracing"
multipart= false

question = '''
Consider the following program. Write down the output

```{code-block} cpp
#include <iostream>
using namespace std;

void increment(int& a) {
  a = a + 1;
}
void decrement(int a) {
  a = a - 1;
}
void doubling(int* a) {
  *a = (*a) * 2;
}

int main() {
  int a = 3;
  increment(a);
  cout << a << endl;
  decrement(a);
  cout << a << endl;
  doubling(&a);
  cout << a << endl;
  return 0;
}
```
'''

answer = '''
4
4
8
'''




[[exercises]]
question-id = "chapter-01-Q3"
title = "Question 6 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "function programming"
table = false
multipart = true

LLM = '''
Compared to C, passing by reference is introduced in C++. Both of the following two functions can be used to swap the value of two integers:

```{code-block} cpp
void swap_by_p(int* a, int* b); // swap version 1
void swap_by_r(int& a, int& b); // swap version 2
```

Write the implementations for these two functions (no more than 4 lines of code for each function)

void swap_by_p(int* a, int* b) {
  
  // Your code here

}
'''

question = '''
Compared to C, passing by reference is introduced in C++. Both of the following two functions can be used to swap the value of two integers:

```{code-block} cpp
void swap_by_p(int* a, int* b); // swap version 1
void swap_by_r(int& a, int& b); // swap version 2
```

(1) Write the implementations for these two functions (no more than 4 lines of code for each function)

a. Version 1
'''
starter-code = '''
void swap_by_p(int* a, int* b) {
  
  // Your code here

}
'''

answer = '''
void swap_by_p(int* a, int* b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}
'''
main-function = '''
#include <iostream>
using namespace std;

int main() {
  int a, b;
  while (cin >> a >> b) {
    cout << "Before: " << a << " " << b << endl;
    swap_by_p(&a, &b);
    cout << "After: " << a << " " << b << endl;
  }
  return 0;
}
'''

[[exercises.testcases]]
input = "Q3.T1.in"
output = "Q3.T1.out"

[[exercises.testcases]]
input = "Q3.T2.in"
output = "Q3.T2.out"

[[exercises.testcases]]
input = "Q3.T3.in"
output = "Q3.T3.out"

[[exercises.testcases]]
input = "Q3.T4.in"
output = "Q3.T4.out"



[[exercises]]
question-id = "chapter-01-Q4"
title = "Question 6 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "function programming"
table = false
multipart = true

LLM = '''
Compared to C, passing by reference is introduced in C++. Both of the following two functions can be used to swap the value of two integers:

```{code-block} cpp
void swap_by_p(int* a, int* b); // swap version 1
void swap_by_r(int& a, int& b); // swap version 2
```

Write the implementations for these two functions (no more than 4 lines of code for each function)

void swap_by_r(int& a, int& b) {

  // Your code here

}
'''


question = '''
b. Version 2
'''
starter-code = '''
void swap_by_r(int& a, int& b) {

  // Your code here

}
'''

answer = '''
void swap_by_r(int& a, int& b) {
  int temp = a;
  a = b;
  b = temp;
}
'''
main-function = '''
#include <iostream>
using namespace std;

int main() {
  int a, b;
  while (cin >> a >> b) {
    cout << "Before: " << a << " " << b << endl;
    swap_by_r(a, b);
    cout << "After: " << a << " " << b << endl;
  }
  return 0;
}
'''

[[exercises.testcases]]
input = "Q3.T1.in"
output = "Q3.T1.out"

[[exercises.testcases]]
input = "Q3.T2.in"
output = "Q3.T2.out"

[[exercises.testcases]]
input = "Q3.T3.in"
output = "Q3.T3.out"

[[exercises.testcases]]
input = "Q3.T4.in"
output = "Q3.T4.out"




[[exercises]]
question-id = "chapter-01-Q5"
title = "Question 6 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
Compared to C, passing by reference is introduced in C++. Both of the following two functions can be used to swap the value of two integers:

```{code-block} cpp
void swap_by_p(int* a, int* b); // swap version 1
void swap_by_r(int& a, int& b); // swap version 2
```

If given two int variables `x` and `y`, write a function call that swaps the value of `x` and `y`, using `swap_by_p`.
'''


question = '''(2) If given two int variables `x` and `y`, write a function call that swaps the value of `x` and `y`, using `swap_by_p`.
'''

answer = """
swap_by_p (&x, &y);
"""

[[exercises]]
question-id = "chapter-01-Q6"
title = "Question 6 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
Compared to C, passing by reference is introduced in C++. Both of the following two functions can be used to swap the value of two integers:

```{code-block} cpp
void swap_by_p(int* a, int* b); // swap version 1
void swap_by_r(int& a, int& b); // swap version 2
```

If given two int variables `x` and `y`, write a function call that swaps the value of `x` and `y`, using `swap_by_r`. 
'''


question = '''(3) If given two int variables `x` and `y`, write a function call that swaps the value of `x` and `y`, using `swap_by_r`. 
'''

answer = '''
swap_by_r (x, y);
'''



[[exercises]]
question-id = "chapter-01-Q7"
title = "Question 7 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
Ellie writes a program to make a simple database for ECE students who like drinking soy milk from 2T2 to 2T6. She designs two classes: `student` and `ECE`, and puts them into different files below. The main function is in the `main.cpp`.

**ECE.h**
```{code-block} cpp
#ifndefine ECE
#define ECE

#include "student.h"

class ECE{
  ...
};
#endif
```

**ECE.cpp**
```{code-block} cpp
#include "ECE.h"

ECE::ECE(){
  ...
}
```

**student.h**
```{code-block} cpp
#include <string>

class Student{
  ...
};
```

**student.cpp**
```{code-block} cpp
#include "student.h"

Student::Student(){
  ...     
}
```

**main.cpp**
```{code-block} cpp
#include "ECE.h"
#include "student.h"
int main(){
     ...
}
```

(1) Ellie tries to compile this program with g++. What's the Unix (i.e., terminal) command that compiles the entire program using one command, which generates an executable called `small_database`?
'''


question = '''
Ellie writes a program to make a simple database for ECE students who like drinking soy milk from 2T2 to 2T6. She designs two classes: `student` and `ECE`, and puts them into different files below. The main function is in the `main.cpp`.

**ECE.h**
```{code-block} cpp
#ifndefine ECE
#define ECE

#include "student.h"

class ECE{
  ...
};
#endif
```

**ECE.cpp**
```{code-block} cpp
#include "ECE.h"

ECE::ECE(){
  ...
}
```

**student.h**
```{code-block} cpp
#include <string>

class Student{
  ...
};
```

**student.cpp**
```{code-block} cpp
#include "student.h"

Student::Student(){
  ...     
}
```

**main.cpp**
```{code-block} cpp
#include "ECE.h"
#include "student.h"
int main(){
     ...
}
```

(1) Ellie tries to compile this program with g++. What's the Unix (i.e., terminal) command that compiles the entire program using one command, which generates an executable called `small_database`?

'''

answer = '''
g++ ECE.cpp student.cpp main.cpp -o small_database
'''



[[exercises]]
question-id = "chapter-01-Q8"
title = "Question 7 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
Ellie writes a program to make a simple database for ECE students who like drinking soy milk from 2T2 to 2T6. She designs two classes: `student` and `ECE`, and puts them into different files below. The main function is in the `main.cpp`.

**ECE.h**
```{code-block} cpp
#ifndefine ECE
#define ECE

#include "student.h"

class ECE{
  ...
};
#endif
```

**ECE.cpp**
```{code-block} cpp
#include "ECE.h"

ECE::ECE(){
  ...
}
```

**student.h**
```{code-block} cpp
#include <string>

class Student{
  ...
};
```

**student.cpp**
```{code-block} cpp
#include "student.h"

Student::Student(){
  ...     
}
```

**main.cpp**
```{code-block} cpp
#include "ECE.h"
#include "student.h"
int main(){
     ...
}
```

(2) However, it fails to compile. Can you point out the compile-time error and fix this error for her? 
'''


question = '''
(2) However, it fails to compile. Can you point out the compile-time error and fix this error for her? 
'''

answer = '''
No header guard in student.h
'''

[[exercises]]
question-id = "chapter-01-Q9"
title = "Question 7 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
Ellie writes a program to make a simple database for ECE students who like drinking soy milk from 2T2 to 2T6. She designs two classes: `student` and `ECE`, and puts them into different files below. The main function is in the `main.cpp`.

**ECE.h**
```{code-block} cpp
#ifndefine ECE
#define ECE

#include "student.h"

class ECE{
  ...
};
#endif
```

**ECE.cpp**
```{code-block} cpp
#include "ECE.h"

ECE::ECE(){
  ...
}
```

**student.h**
```{code-block} cpp
#include <string>

class Student{
  ...
};
```

**student.cpp**
```{code-block} cpp
#include "student.h"

Student::Student(){
  ...     
}
```

**main.cpp**
```{code-block} cpp
#include "ECE.h"
#include "student.h"
int main(){
     ...
}
```

(3) With your help, Ellie has fixed the compile-time error. Now, Ellie wants to use separate compilation learned from ECE244 to compile her project. Write down all the Unix commands necessary to separately compile the above files and generate an executable `small_database`.
'''


question = '''
(3) With your help, Ellie has fixed the compile-time error. Now, Ellie wants to use separate compilation learned from ECE244 to compile her project. Write down all the Unix commands necessary to separately compile the above files and generate an executable `small_database`.
'''

answer = '''
g++ -c student.cpp -o student.o

g++ -c ECE.cpp -o ECE.o

g++ -c main.cpp -o main.o

g++ student.o ECE.o main.o -o small_database
'''

[[exercises]]
question-id = "chapter-01-Q10"
title = "Question 7 in Fall 2022 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
Ellie writes a program to make a simple database for ECE students who like drinking soy milk from 2T2 to 2T6. She designs two classes: `student` and `ECE`, and puts them into different files below. The main function is in the `main.cpp`.

**ECE.h**
```{code-block} cpp
#ifndefine ECE
#define ECE

#include "student.h"

class ECE{
  ...
};
#endif
```

**ECE.cpp**
```{code-block} cpp
#include "ECE.h"

ECE::ECE(){
  ...
}
```

**student.h**
```{code-block} cpp
#include <string>

class Student{
  ...
};
```

**student.cpp**
```{code-block} cpp
#include "student.h"

Student::Student(){
  ...     
}
```

**main.cpp**
```{code-block} cpp
#include "ECE.h"
#include "student.h"
int main(){
     ...
}
```

(4) Ellie then changes some code in `ECE.cpp`. Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files needed. Assume the generated executable is called `small_database`.
'''

question = '''
(4) Ellie then changes some code in `ECE.cpp`. Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files needed. Assume the generated executable is called `small_database`.
'''

answer = '''
g++ -c ECE.cpp -o ECE.o

g++ student.o ECE.o main.o -o small_database
'''




[[exercises]]
question-id = "chapter-01-Q11"
title = "Question 2 Fall 2018 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
You are given a program that has a main function and 3 classes: First, Second and Third. For each of these classes, you have a definition file and an implementation file. Thus, you have seven
files in total: First.h, First.cpp, Second.h, Second.cpp, Third.h, Third.cpp and main.cpp. All the files exist in the same directory. 

The first few lines of each file are shown below.
The rest of the contents of each file is irrelevant to the question and is shown as `...`. You may assume the definition/implementation files are error-free.

**First.h**
```{code-block} cpp
#ifndef FIRST_H
#define FIRST_H
class First {
  ...
};
#endif
```

**First.cpp**
```{code-block} cpp
#include “First.h”
First::First() {
  ...
}
```

**Second.h**
```{code-block} cpp
#ifndef SECOND_H
#define SECOND_H
class Second {
  ...
};
#endif
```

**Second.cpp**
```{code-block} cpp
#include “First.h”
#include “Second.h”
Second::Second() {
  ...
}
```

**Third.h**
```{code-block} cpp
#ifndef THIRD_H
#define THIRD_H
class Third {
  ...
};
#endif
```

**Third.cpp**
```{code-block} cpp
#include “Second.h”
Third::Third() {
  ...
}
```

**main.cpp**
```{code-block} cpp
#include “First.h”
#include “Second.h”
#include “Third.h”
int main() {
  ...
}
```

The files are to be separately compiled and then linked into a single executable called `main`.

Write down the Unix commands necessary to separately compile the above files and generate the executable.
'''


question = '''
You are given a program that has a main function and 3 classes: First, Second and Third. For each of these classes, you have a definition file and an implementation file. Thus, you have seven
files in total: First.h, First.cpp, Second.h, Second.cpp, Third.h, Third.cpp and main.cpp. All the files exist in the same directory. 

The first few lines of each file are shown below.
The rest of the contents of each file is irrelevant to the question and is shown as `...`. You may assume the definition/implementation files are error-free.

**First.h**
```{code-block} cpp
#ifndef FIRST_H
#define FIRST_H
class First {
  ...
};
#endif
```

**First.cpp**
```{code-block} cpp
#include “First.h”
First::First() {
  ...
}
```

**Second.h**
```{code-block} cpp
#ifndef SECOND_H
#define SECOND_H
class Second {
  ...
};
#endif
```

**Second.cpp**
```{code-block} cpp
#include “First.h”
#include “Second.h”
Second::Second() {
  ...
}
```

**Third.h**
```{code-block} cpp
#ifndef THIRD_H
#define THIRD_H
class Third {
  ...
};
#endif
```

**Third.cpp**
```{code-block} cpp
#include “Second.h”
Third::Third() {
  ...
}
```

**main.cpp**
```{code-block} cpp
#include “First.h”
#include “Second.h”
#include “Third.h”
int main() {
  ...
}
```

The files are to be separately compiled and then linked into a single executable called `main`.

(1) Write down the Unix commands necessary to separately compile the above files and generate the executable.
'''

answer = '''
g++ -c First.cpp -o First.o

g++ -c Second.cpp -o Second.o

g++ -c Third.cpp -o Third.o

g++ -c main.cpp -o main.o

g++ First.o Second.o Third.o main.o -o main
'''


[[exercises]]
question-id = "chapter-01-Q12"
title = "Question 2 Fall 2018 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
You are given a program that has a main function and 3 classes: First, Second and Third. For each of these classes, you have a definition file and an implementation file. Thus, you have seven
files in total: First.h, First.cpp, Second.h, Second.cpp, Third.h, Third.cpp and main.cpp. All the files exist in the same directory. 

The first few lines of each file are shown below.
The rest of the contents of each file is irrelevant to the question and is shown as `...`. You may assume the definition/implementation files are error-free.

**First.h**
```{code-block} cpp
#ifndef FIRST_H
#define FIRST_H
class First {
  ...
};
#endif
```

**First.cpp**
```{code-block} cpp
#include “First.h”
First::First() {
  ...
}
```

**Second.h**
```{code-block} cpp
#ifndef SECOND_H
#define SECOND_H
class Second {
  ...
};
#endif
```

**Second.cpp**
```{code-block} cpp
#include “First.h”
#include “Second.h”
Second::Second() {
  ...
}
```

**Third.h**
```{code-block} cpp
#ifndef THIRD_H
#define THIRD_H
class Third {
  ...
};
#endif
```

**Third.cpp**
```{code-block} cpp
#include “Second.h”
Third::Third() {
  ...
}
```

**main.cpp**
```{code-block} cpp
#include “First.h”
#include “Second.h”
#include “Third.h”
int main() {
  ...
}
```

The files are to be separately compiled and then linked into a single executable called `main`.

(2) You modify the file `Second.cpp`. Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files possible.

'''

question = '''
(2) You modify the file `Second.cpp`. Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files possible.
'''

answer = '''
g++ -c Second.cpp -o Second.o

g++ First.o Second.o Third.o main.o -o main
'''

[[exercises]]
question-id = "chapter-01-Q13"
title = "Question 2 Fall 2018 Midterm Exam"
difficulty = "Easy"
type = "explaination"
table = false
multipart = true

LLM = '''
You are given a program that has a main function and 3 classes: First, Second and Third. For each of these classes, you have a definition file and an implementation file. Thus, you have seven
files in total: First.h, First.cpp, Second.h, Second.cpp, Third.h, Third.cpp and main.cpp. All the files exist in the same directory. 

The first few lines of each file are shown below.
The rest of the contents of each file is irrelevant to the question and is shown as `...`. You may assume the definition/implementation files are error-free.

**First.h**
```{code-block} cpp
#ifndef FIRST_H
#define FIRST_H
class First {
  ...
};
#endif
```

**First.cpp**
```{code-block} cpp
#include “First.h”
First::First() {
  ...
}
```

**Second.h**
```{code-block} cpp
#ifndef SECOND_H
#define SECOND_H
class Second {
  ...
};
#endif
```

**Second.cpp**
```{code-block} cpp
#include “First.h”
#include “Second.h”
Second::Second() {
  ...
}
```

**Third.h**
```{code-block} cpp
#ifndef THIRD_H
#define THIRD_H
class Third {
  ...
};
#endif
```

**Third.cpp**
```{code-block} cpp
#include “Second.h”
Third::Third() {
  ...
}
```

**main.cpp**
```{code-block} cpp
#include “First.h”
#include “Second.h”
#include “Third.h”
int main() {
  ...
}
```

The files are to be separately compiled and then linked into a single executable called `main`.

(3) You modify the file `First.h`. Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files possible.

'''


question = '''
(3) You modify the file `First.h`. Write down the Unix commands necessary to regenerate the executable by compiling the smallest number of files possible.
'''

answer = '''
g++ -c First.cpp -o First.o

g++ -c Second.cpp -o Second.o

g++ -c main.cpp -o main.o

g++ First.o Second.o Third.o main.o -o main
'''